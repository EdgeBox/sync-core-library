<?php
/**
 * DefaultApi
 * PHP version 7.4.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Sync Core.
 *
 * The Sync Core that sends and receives content from all connected sites and services for Content Sync.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EdgeBox\SyncCore\V2\Raw\Api;

use EdgeBox\SyncCore\V2\Raw\ApiException;
use EdgeBox\SyncCore\V2\Raw\Configuration;
use EdgeBox\SyncCore\V2\Raw\HeaderSelector;
use EdgeBox\SyncCore\V2\Raw\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * DefaultApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class DefaultApi
{
    /** @var string[] */
    public const contentTypes = [
        'authenticationControllerCreate' => [
            'application/json',
        ],
        'authenticationControllerGetBasicAuth' => [
            'application/json',
        ],
        'authenticationControllerSetBasicAuth' => [
            'application/json',
        ],
        'backendControllerExchangeToken' => [
            'application/json',
        ],
        'backendControllerRefreshContract' => [
            'application/json',
        ],
        'configurationControllerContract' => [
            'application/json',
        ],
        'configurationControllerInfo' => [
            'application/json',
        ],
        'configurationControllerPullDashboard' => [
            'application/json',
        ],
        'contractControllerItem' => [
            'application/json',
        ],
        'contractControllerItemByUuid' => [
            'application/json',
        ],
        'contractRevisionControllerItem' => [
            'application/json',
        ],
        'contractRevisionControllerMostRecentForContract' => [
            'application/json',
        ],
        'customerControllerItem' => [
            'application/json',
        ],
        'customerControllerItemByUuid' => [
            'application/json',
        ],
        'featuresControllerSummary' => [
            'application/json',
        ],
        'featuresControllerSummaryAll' => [
            'application/json',
        ],
        'featuresControllerUpdate' => [
            'application/json',
        ],
        'fileControllerCreate' => [
            'application/json',
        ],
        'fileControllerDownload' => [
            'application/json',
        ],
        'fileControllerFileUploaded' => [
            'application/json',
        ],
        'fileControllerItem' => [
            'application/json',
        ],
        'flowControllerCreate' => [
            'application/json',
        ],
        'flowControllerDelete' => [
            'application/json',
        ],
        'flowControllerItem' => [
            'application/json',
        ],
        'flowControllerList' => [
            'application/json',
        ],
        'healthControllerLive' => [
            'application/json',
        ],
        'healthControllerReady' => [
            'application/json',
        ],
        'localFileControllerDownload' => [
            'application/json',
        ],
        'localFileControllerUpload' => [
            'multipart/form-data',
        ],
        'loggingControllerList' => [
            'application/json',
        ],
        'migrationControllerCreate' => [
            'application/json',
        ],
        'migrationControllerDelete' => [
            'application/json',
        ],
        'migrationControllerItem' => [
            'application/json',
        ],
        'migrationControllerList' => [
            'application/json',
        ],
        'migrationControllerSummary' => [
            'application/json',
        ],
        'poolControllerCreate' => [
            'application/json',
        ],
        'poolControllerItem' => [
            'application/json',
        ],
        'poolControllerList' => [
            'application/json',
        ],
        'previewsControllerList' => [
            'application/json',
        ],
        'previewsControllerListForFlow' => [
            'application/json',
        ],
        'projectControllerItem' => [
            'application/json',
        ],
        'projectControllerItemByUuid' => [
            'application/json',
        ],
        'remoteEntityRevisionControllerCreate' => [
            'application/json',
        ],
        'remoteEntityRevisionControllerDelete' => [
            'application/json',
        ],
        'remoteEntityRevisionControllerItem' => [
            'application/json',
        ],
        'remoteEntityRevisionControllerList' => [
            'application/json',
        ],
        'remoteEntityRevisionControllerSerialize' => [
            'application/json',
        ],
        'remoteEntityTypeControllerByMachineName' => [
            'application/json',
        ],
        'remoteEntityTypeControllerItem' => [
            'application/json',
        ],
        'remoteEntityTypeControllerList' => [
            'application/json',
        ],
        'remoteEntityTypeVersionControllerCreate' => [
            'application/json',
        ],
        'remoteEntityTypeVersionControllerGetVersionUsage' => [
            'application/json',
        ],
        'remoteEntityTypeVersionControllerItem' => [
            'application/json',
        ],
        'remoteEntityUsageControllerItem' => [
            'application/json',
        ],
        'remoteEntityUsageControllerList' => [
            'application/json',
        ],
        'siteControllerGetRequests' => [
            'application/json',
        ],
        'siteControllerGetThrottling' => [
            'application/json',
        ],
        'siteControllerItem' => [
            'application/json',
        ],
        'siteControllerItemByUuid' => [
            'application/json',
        ],
        'siteControllerRegister' => [
            'application/json',
        ],
        'siteControllerRegisterNew' => [
            'application/json',
        ],
        'siteControllerRespondToRequest' => [
            'application/json',
        ],
        'siteControllerSearch' => [
            'application/json',
        ],
        'siteControllerSetThrottling' => [
            'application/json',
        ],
        'siteControllerUpdate' => [
            'application/json',
        ],
        'syndicationControllerCreate' => [
            'application/json',
        ],
        'syndicationControllerDelete' => [
            'application/json',
        ],
        'syndicationControllerGetErrors' => [
            'application/json',
        ],
        'syndicationControllerItem' => [
            'application/json',
        ],
        'syndicationControllerList' => [
            'application/json',
        ],
        'syndicationControllerRestart' => [
            'application/json',
        ],
        'syndicationControllerUsageSummary' => [
            'application/json',
        ],
        'syndicationControllerUsageSummaryForSite' => [
            'application/json',
        ],
        'usageStatsControllerGetForPeriod' => [
            'application/json',
        ],
        'usageStatsControllerGetForType' => [
            'application/json',
        ],
        'usageStatsControllerSummary' => [
            'application/json',
        ],
    ];
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authenticationControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto createAuthenticationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function authenticationControllerCreate($createAuthenticationDto, string $contentType = self::contentTypes['authenticationControllerCreate'][0])
    {
        list($response) = $this->authenticationControllerCreateWithHttpInfo($createAuthenticationDto, $contentType);

        return $response;
    }

    /**
     * Operation authenticationControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authenticationControllerCreateWithHttpInfo($createAuthenticationDto, string $contentType = self::contentTypes['authenticationControllerCreate'][0])
    {
        $request = $this->authenticationControllerCreateRequest($createAuthenticationDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation authenticationControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerCreateAsync($createAuthenticationDto, string $contentType = self::contentTypes['authenticationControllerCreate'][0])
    {
        return $this->authenticationControllerCreateAsyncWithHttpInfo($createAuthenticationDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation authenticationControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerCreateAsyncWithHttpInfo($createAuthenticationDto, string $contentType = self::contentTypes['authenticationControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->authenticationControllerCreateRequest($createAuthenticationDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'authenticationControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authenticationControllerCreateRequest($createAuthenticationDto, string $contentType = self::contentTypes['authenticationControllerCreate'][0])
    {
        // verify the required parameter 'createAuthenticationDto' is set
        if (null === $createAuthenticationDto || (is_array($createAuthenticationDto) && 0 === count($createAuthenticationDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createAuthenticationDto when calling authenticationControllerCreate'
            );
        }

        $resourcePath = '/sync-core/authentication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createAuthenticationDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createAuthenticationDto));
            } else {
                $httpBody = $createAuthenticationDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authenticationControllerGetBasicAuth.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerGetBasicAuth'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto
     */
    public function authenticationControllerGetBasicAuth(string $contentType = self::contentTypes['authenticationControllerGetBasicAuth'][0])
    {
        list($response) = $this->authenticationControllerGetBasicAuthWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation authenticationControllerGetBasicAuthWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerGetBasicAuth'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function authenticationControllerGetBasicAuthWithHttpInfo(string $contentType = self::contentTypes['authenticationControllerGetBasicAuth'][0])
    {
        $request = $this->authenticationControllerGetBasicAuthRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation authenticationControllerGetBasicAuthAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerGetBasicAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerGetBasicAuthAsync(string $contentType = self::contentTypes['authenticationControllerGetBasicAuth'][0])
    {
        return $this->authenticationControllerGetBasicAuthAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation authenticationControllerGetBasicAuthAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerGetBasicAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerGetBasicAuthAsyncWithHttpInfo(string $contentType = self::contentTypes['authenticationControllerGetBasicAuth'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\GetBasicAuthDto';
        $request = $this->authenticationControllerGetBasicAuthRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'authenticationControllerGetBasicAuth'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerGetBasicAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authenticationControllerGetBasicAuthRequest(string $contentType = self::contentTypes['authenticationControllerGetBasicAuth'][0])
    {
        $resourcePath = '/sync-core/authentication/basic-auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation authenticationControllerSetBasicAuth.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetBasicAuthDto $setBasicAuthDto setBasicAuthDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerSetBasicAuth'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function authenticationControllerSetBasicAuth($setBasicAuthDto, string $contentType = self::contentTypes['authenticationControllerSetBasicAuth'][0])
    {
        list($response) = $this->authenticationControllerSetBasicAuthWithHttpInfo($setBasicAuthDto, $contentType);

        return $response;
    }

    /**
     * Operation authenticationControllerSetBasicAuthWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetBasicAuthDto $setBasicAuthDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerSetBasicAuth'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authenticationControllerSetBasicAuthWithHttpInfo($setBasicAuthDto, string $contentType = self::contentTypes['authenticationControllerSetBasicAuth'][0])
    {
        $request = $this->authenticationControllerSetBasicAuthRequest($setBasicAuthDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation authenticationControllerSetBasicAuthAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetBasicAuthDto $setBasicAuthDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerSetBasicAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerSetBasicAuthAsync($setBasicAuthDto, string $contentType = self::contentTypes['authenticationControllerSetBasicAuth'][0])
    {
        return $this->authenticationControllerSetBasicAuthAsyncWithHttpInfo($setBasicAuthDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation authenticationControllerSetBasicAuthAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetBasicAuthDto $setBasicAuthDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerSetBasicAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerSetBasicAuthAsyncWithHttpInfo($setBasicAuthDto, string $contentType = self::contentTypes['authenticationControllerSetBasicAuth'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->authenticationControllerSetBasicAuthRequest($setBasicAuthDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'authenticationControllerSetBasicAuth'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetBasicAuthDto $setBasicAuthDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['authenticationControllerSetBasicAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authenticationControllerSetBasicAuthRequest($setBasicAuthDto, string $contentType = self::contentTypes['authenticationControllerSetBasicAuth'][0])
    {
        // verify the required parameter 'setBasicAuthDto' is set
        if (null === $setBasicAuthDto || (is_array($setBasicAuthDto) && 0 === count($setBasicAuthDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setBasicAuthDto when calling authenticationControllerSetBasicAuth'
            );
        }

        $resourcePath = '/sync-core/authentication/basic-auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($setBasicAuthDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($setBasicAuthDto));
            } else {
                $httpBody = $setBasicAuthDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation backendControllerExchangeToken.
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerExchangeToken'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\JwtResponse
     */
    public function backendControllerExchangeToken($uuid, string $contentType = self::contentTypes['backendControllerExchangeToken'][0])
    {
        list($response) = $this->backendControllerExchangeTokenWithHttpInfo($uuid, $contentType);

        return $response;
    }

    /**
     * Operation backendControllerExchangeTokenWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerExchangeToken'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\JwtResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function backendControllerExchangeTokenWithHttpInfo($uuid, string $contentType = self::contentTypes['backendControllerExchangeToken'][0])
    {
        $request = $this->backendControllerExchangeTokenRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\JwtResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\JwtResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\JwtResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\JwtResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\JwtResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation backendControllerExchangeTokenAsync.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerExchangeToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function backendControllerExchangeTokenAsync($uuid, string $contentType = self::contentTypes['backendControllerExchangeToken'][0])
    {
        return $this->backendControllerExchangeTokenAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation backendControllerExchangeTokenAsyncWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerExchangeToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function backendControllerExchangeTokenAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['backendControllerExchangeToken'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\JwtResponse';
        $request = $this->backendControllerExchangeTokenRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'backendControllerExchangeToken'.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerExchangeToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function backendControllerExchangeTokenRequest($uuid, string $contentType = self::contentTypes['backendControllerExchangeToken'][0])
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling backendControllerExchangeToken'
            );
        }

        $resourcePath = '/sync-core/backend/exchange-token/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation backendControllerRefreshContract.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerRefreshContract'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function backendControllerRefreshContract($id, string $contentType = self::contentTypes['backendControllerRefreshContract'][0])
    {
        list($response) = $this->backendControllerRefreshContractWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation backendControllerRefreshContractWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerRefreshContract'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function backendControllerRefreshContractWithHttpInfo($id, string $contentType = self::contentTypes['backendControllerRefreshContract'][0])
    {
        $request = $this->backendControllerRefreshContractRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation backendControllerRefreshContractAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerRefreshContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function backendControllerRefreshContractAsync($id, string $contentType = self::contentTypes['backendControllerRefreshContract'][0])
    {
        return $this->backendControllerRefreshContractAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation backendControllerRefreshContractAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerRefreshContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function backendControllerRefreshContractAsyncWithHttpInfo($id, string $contentType = self::contentTypes['backendControllerRefreshContract'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->backendControllerRefreshContractRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'backendControllerRefreshContract'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['backendControllerRefreshContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function backendControllerRefreshContractRequest($id, string $contentType = self::contentTypes['backendControllerRefreshContract'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling backendControllerRefreshContract'
            );
        }

        $resourcePath = '/sync-core/backend/contract/{id}/refresh';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation configurationControllerContract.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerContract'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration
     */
    public function configurationControllerContract(string $contentType = self::contentTypes['configurationControllerContract'][0])
    {
        list($response) = $this->configurationControllerContractWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation configurationControllerContractWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerContract'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationControllerContractWithHttpInfo(string $contentType = self::contentTypes['configurationControllerContract'][0])
    {
        $request = $this->configurationControllerContractRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationControllerContractAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerContractAsync(string $contentType = self::contentTypes['configurationControllerContract'][0])
    {
        return $this->configurationControllerContractAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation configurationControllerContractAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerContractAsyncWithHttpInfo(string $contentType = self::contentTypes['configurationControllerContract'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractConfiguration';
        $request = $this->configurationControllerContractRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'configurationControllerContract'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function configurationControllerContractRequest(string $contentType = self::contentTypes['configurationControllerContract'][0])
    {
        $resourcePath = '/sync-core/configuration/contract';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation configurationControllerInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerInfo'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo
     */
    public function configurationControllerInfo(string $contentType = self::contentTypes['configurationControllerInfo'][0])
    {
        list($response) = $this->configurationControllerInfoWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation configurationControllerInfoWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerInfo'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationControllerInfoWithHttpInfo(string $contentType = self::contentTypes['configurationControllerInfo'][0])
    {
        $request = $this->configurationControllerInfoRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationControllerInfoAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerInfoAsync(string $contentType = self::contentTypes['configurationControllerInfo'][0])
    {
        return $this->configurationControllerInfoAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation configurationControllerInfoAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerInfoAsyncWithHttpInfo(string $contentType = self::contentTypes['configurationControllerInfo'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyncCoreInfo';
        $request = $this->configurationControllerInfoRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'configurationControllerInfo'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function configurationControllerInfoRequest(string $contentType = self::contentTypes['configurationControllerInfo'][0])
    {
        $resourcePath = '/sync-core/configuration/info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation configurationControllerPullDashboard.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerPullDashboard'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration
     */
    public function configurationControllerPullDashboard(string $contentType = self::contentTypes['configurationControllerPullDashboard'][0])
    {
        list($response) = $this->configurationControllerPullDashboardWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation configurationControllerPullDashboardWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerPullDashboard'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationControllerPullDashboardWithHttpInfo(string $contentType = self::contentTypes['configurationControllerPullDashboard'][0])
    {
        $request = $this->configurationControllerPullDashboardRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationControllerPullDashboardAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerPullDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerPullDashboardAsync(string $contentType = self::contentTypes['configurationControllerPullDashboard'][0])
    {
        return $this->configurationControllerPullDashboardAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation configurationControllerPullDashboardAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerPullDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerPullDashboardAsyncWithHttpInfo(string $contentType = self::contentTypes['configurationControllerPullDashboard'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration';
        $request = $this->configurationControllerPullDashboardRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'configurationControllerPullDashboard'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['configurationControllerPullDashboard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function configurationControllerPullDashboardRequest(string $contentType = self::contentTypes['configurationControllerPullDashboard'][0])
    {
        $resourcePath = '/sync-core/configuration/pull-dashboard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity
     */
    public function contractControllerItem($id, string $contentType = self::contentTypes['contractControllerItem'][0])
    {
        list($response) = $this->contractControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation contractControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['contractControllerItem'][0])
    {
        $request = $this->contractControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemAsync($id, string $contentType = self::contentTypes['contractControllerItem'][0])
    {
        return $this->contractControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['contractControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
        $request = $this->contractControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractControllerItemRequest($id, string $contentType = self::contentTypes['contractControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contractControllerItem'
            );
        }

        $resourcePath = '/sync-core/contract/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractControllerItemByUuid.
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity
     */
    public function contractControllerItemByUuid($uuid, string $contentType = self::contentTypes['contractControllerItemByUuid'][0])
    {
        list($response) = $this->contractControllerItemByUuidWithHttpInfo($uuid, $contentType);

        return $response;
    }

    /**
     * Operation contractControllerItemByUuidWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractControllerItemByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['contractControllerItemByUuid'][0])
    {
        $request = $this->contractControllerItemByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractControllerItemByUuidAsync.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemByUuidAsync($uuid, string $contentType = self::contentTypes['contractControllerItemByUuid'][0])
    {
        return $this->contractControllerItemByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['contractControllerItemByUuid'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
        $request = $this->contractControllerItemByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractControllerItemByUuid'.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractControllerItemByUuidRequest($uuid, string $contentType = self::contentTypes['contractControllerItemByUuid'][0])
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling contractControllerItemByUuid'
            );
        }

        $resourcePath = '/sync-core/contract/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractRevisionControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity
     */
    public function contractRevisionControllerItem($id, string $contentType = self::contentTypes['contractRevisionControllerItem'][0])
    {
        list($response) = $this->contractRevisionControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation contractRevisionControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractRevisionControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['contractRevisionControllerItem'][0])
    {
        $request = $this->contractRevisionControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractRevisionControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerItemAsync($id, string $contentType = self::contentTypes['contractRevisionControllerItem'][0])
    {
        return $this->contractRevisionControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractRevisionControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['contractRevisionControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity';
        $request = $this->contractRevisionControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractRevisionControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractRevisionControllerItemRequest($id, string $contentType = self::contentTypes['contractRevisionControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contractRevisionControllerItem'
            );
        }

        $resourcePath = '/sync-core/contract-revision/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractRevisionControllerMostRecentForContract.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerMostRecentForContract'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions
     */
    public function contractRevisionControllerMostRecentForContract($id, string $contentType = self::contentTypes['contractRevisionControllerMostRecentForContract'][0])
    {
        list($response) = $this->contractRevisionControllerMostRecentForContractWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation contractRevisionControllerMostRecentForContractWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerMostRecentForContract'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractRevisionControllerMostRecentForContractWithHttpInfo($id, string $contentType = self::contentTypes['contractRevisionControllerMostRecentForContract'][0])
    {
        $request = $this->contractRevisionControllerMostRecentForContractRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractRevisionControllerMostRecentForContractAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerMostRecentForContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerMostRecentForContractAsync($id, string $contentType = self::contentTypes['contractRevisionControllerMostRecentForContract'][0])
    {
        return $this->contractRevisionControllerMostRecentForContractAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractRevisionControllerMostRecentForContractAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerMostRecentForContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerMostRecentForContractAsyncWithHttpInfo($id, string $contentType = self::contentTypes['contractRevisionControllerMostRecentForContract'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions';
        $request = $this->contractRevisionControllerMostRecentForContractRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractRevisionControllerMostRecentForContract'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['contractRevisionControllerMostRecentForContract'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractRevisionControllerMostRecentForContractRequest($id, string $contentType = self::contentTypes['contractRevisionControllerMostRecentForContract'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling contractRevisionControllerMostRecentForContract'
            );
        }

        $resourcePath = '/sync-core/contract-revision/most-recent-for-contract/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity
     */
    public function customerControllerItem($id, string $contentType = self::contentTypes['customerControllerItem'][0])
    {
        list($response) = $this->customerControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation customerControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['customerControllerItem'][0])
    {
        $request = $this->customerControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemAsync($id, string $contentType = self::contentTypes['customerControllerItem'][0])
    {
        return $this->customerControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation customerControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['customerControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
        $request = $this->customerControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'customerControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customerControllerItemRequest($id, string $contentType = self::contentTypes['customerControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling customerControllerItem'
            );
        }

        $resourcePath = '/sync-core/customer/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerControllerItemByUuid.
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity
     */
    public function customerControllerItemByUuid($uuid, string $contentType = self::contentTypes['customerControllerItemByUuid'][0])
    {
        list($response) = $this->customerControllerItemByUuidWithHttpInfo($uuid, $contentType);

        return $response;
    }

    /**
     * Operation customerControllerItemByUuidWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerControllerItemByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['customerControllerItemByUuid'][0])
    {
        $request = $this->customerControllerItemByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerControllerItemByUuidAsync.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemByUuidAsync($uuid, string $contentType = self::contentTypes['customerControllerItemByUuid'][0])
    {
        return $this->customerControllerItemByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation customerControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['customerControllerItemByUuid'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
        $request = $this->customerControllerItemByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'customerControllerItemByUuid'.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['customerControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customerControllerItemByUuidRequest($uuid, string $contentType = self::contentTypes['customerControllerItemByUuid'][0])
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling customerControllerItemByUuid'
            );
        }

        $resourcePath = '/sync-core/customer/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation featuresControllerSummary.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary
     */
    public function featuresControllerSummary(string $contentType = self::contentTypes['featuresControllerSummary'][0])
    {
        list($response) = $this->featuresControllerSummaryWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation featuresControllerSummaryWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function featuresControllerSummaryWithHttpInfo(string $contentType = self::contentTypes['featuresControllerSummary'][0])
    {
        $request = $this->featuresControllerSummaryRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation featuresControllerSummaryAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function featuresControllerSummaryAsync(string $contentType = self::contentTypes['featuresControllerSummary'][0])
    {
        return $this->featuresControllerSummaryAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation featuresControllerSummaryAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function featuresControllerSummaryAsyncWithHttpInfo(string $contentType = self::contentTypes['featuresControllerSummary'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary';
        $request = $this->featuresControllerSummaryRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'featuresControllerSummary'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function featuresControllerSummaryRequest(string $contentType = self::contentTypes['featuresControllerSummary'][0])
    {
        $resourcePath = '/sync-core/features/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation featuresControllerSummaryAll.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummaryAll'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll
     */
    public function featuresControllerSummaryAll(string $contentType = self::contentTypes['featuresControllerSummaryAll'][0])
    {
        list($response) = $this->featuresControllerSummaryAllWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation featuresControllerSummaryAllWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummaryAll'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll, HTTP status code, HTTP response headers (array of strings)
     */
    public function featuresControllerSummaryAllWithHttpInfo(string $contentType = self::contentTypes['featuresControllerSummaryAll'][0])
    {
        $request = $this->featuresControllerSummaryAllRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation featuresControllerSummaryAllAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummaryAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function featuresControllerSummaryAllAsync(string $contentType = self::contentTypes['featuresControllerSummaryAll'][0])
    {
        return $this->featuresControllerSummaryAllAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation featuresControllerSummaryAllAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummaryAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function featuresControllerSummaryAllAsyncWithHttpInfo(string $contentType = self::contentTypes['featuresControllerSummaryAll'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummaryAll';
        $request = $this->featuresControllerSummaryAllRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'featuresControllerSummaryAll'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerSummaryAll'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function featuresControllerSummaryAllRequest(string $contentType = self::contentTypes['featuresControllerSummaryAll'][0])
    {
        $resourcePath = '/sync-core/features/summary/all';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation featuresControllerUpdate.
     *
     * @param  FeatureFlagTargetType $targetType targetType (required)
     * @param  string $featureName featureName (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetFeatureFlagDto $setFeatureFlagDto setFeatureFlagDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerUpdate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary
     */
    public function featuresControllerUpdate($targetType, $featureName, $setFeatureFlagDto, string $contentType = self::contentTypes['featuresControllerUpdate'][0])
    {
        list($response) = $this->featuresControllerUpdateWithHttpInfo($targetType, $featureName, $setFeatureFlagDto, $contentType);

        return $response;
    }

    /**
     * Operation featuresControllerUpdateWithHttpInfo.
     *
     * @param  FeatureFlagTargetType $targetType (required)
     * @param  string $featureName (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetFeatureFlagDto $setFeatureFlagDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerUpdate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function featuresControllerUpdateWithHttpInfo($targetType, $featureName, $setFeatureFlagDto, string $contentType = self::contentTypes['featuresControllerUpdate'][0])
    {
        $request = $this->featuresControllerUpdateRequest($targetType, $featureName, $setFeatureFlagDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation featuresControllerUpdateAsync.
     *
     * @param  FeatureFlagTargetType $targetType (required)
     * @param  string $featureName (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetFeatureFlagDto $setFeatureFlagDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function featuresControllerUpdateAsync($targetType, $featureName, $setFeatureFlagDto, string $contentType = self::contentTypes['featuresControllerUpdate'][0])
    {
        return $this->featuresControllerUpdateAsyncWithHttpInfo($targetType, $featureName, $setFeatureFlagDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation featuresControllerUpdateAsyncWithHttpInfo.
     *
     * @param  FeatureFlagTargetType $targetType (required)
     * @param  string $featureName (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetFeatureFlagDto $setFeatureFlagDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function featuresControllerUpdateAsyncWithHttpInfo($targetType, $featureName, $setFeatureFlagDto, string $contentType = self::contentTypes['featuresControllerUpdate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FeatureFlagSummary';
        $request = $this->featuresControllerUpdateRequest($targetType, $featureName, $setFeatureFlagDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'featuresControllerUpdate'.
     *
     * @param  FeatureFlagTargetType $targetType (required)
     * @param  string $featureName (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetFeatureFlagDto $setFeatureFlagDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['featuresControllerUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function featuresControllerUpdateRequest($targetType, $featureName, $setFeatureFlagDto, string $contentType = self::contentTypes['featuresControllerUpdate'][0])
    {
        // verify the required parameter 'targetType' is set
        if (null === $targetType || (is_array($targetType) && 0 === count($targetType))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $targetType when calling featuresControllerUpdate'
            );
        }

        // verify the required parameter 'featureName' is set
        if (null === $featureName || (is_array($featureName) && 0 === count($featureName))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $featureName when calling featuresControllerUpdate'
            );
        }

        // verify the required parameter 'setFeatureFlagDto' is set
        if (null === $setFeatureFlagDto || (is_array($setFeatureFlagDto) && 0 === count($setFeatureFlagDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setFeatureFlagDto when calling featuresControllerUpdate'
            );
        }

        $resourcePath = '/sync-core/features/{targetType}/{featureName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $targetType) {
            $resourcePath = str_replace(
                '{'.'targetType'.'}',
                ObjectSerializer::toPathValue($targetType),
                $resourcePath
            );
        }
        // path params
        if (null !== $featureName) {
            $resourcePath = str_replace(
                '{'.'featureName'.'}',
                ObjectSerializer::toPathValue($featureName),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($setFeatureFlagDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($setFeatureFlagDto));
            } else {
                $httpBody = $setFeatureFlagDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto createFileDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileEntity
     */
    public function fileControllerCreate($createFileDto, string $contentType = self::contentTypes['fileControllerCreate'][0])
    {
        list($response) = $this->fileControllerCreateWithHttpInfo($createFileDto, $contentType);

        return $response;
    }

    /**
     * Operation fileControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FileEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerCreateWithHttpInfo($createFileDto, string $contentType = self::contentTypes['fileControllerCreate'][0])
    {
        $request = $this->fileControllerCreateRequest($createFileDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerCreateAsync($createFileDto, string $contentType = self::contentTypes['fileControllerCreate'][0])
    {
        return $this->fileControllerCreateAsyncWithHttpInfo($createFileDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerCreateAsyncWithHttpInfo($createFileDto, string $contentType = self::contentTypes['fileControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
        $request = $this->fileControllerCreateRequest($createFileDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerCreateRequest($createFileDto, string $contentType = self::contentTypes['fileControllerCreate'][0])
    {
        // verify the required parameter 'createFileDto' is set
        if (null === $createFileDto || (is_array($createFileDto) && 0 === count($createFileDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createFileDto when calling fileControllerCreate'
            );
        }

        $resourcePath = '/sync-core/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createFileDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createFileDto));
            } else {
                $httpBody = $createFileDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerDownload.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerDownload'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function fileControllerDownload($id, string $contentType = self::contentTypes['fileControllerDownload'][0])
    {
        list($response) = $this->fileControllerDownloadWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation fileControllerDownloadWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerDownload'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerDownloadWithHttpInfo($id, string $contentType = self::contentTypes['fileControllerDownload'][0])
    {
        $request = $this->fileControllerDownloadRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerDownloadAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerDownloadAsync($id, string $contentType = self::contentTypes['fileControllerDownload'][0])
    {
        return $this->fileControllerDownloadAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerDownloadAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerDownloadAsyncWithHttpInfo($id, string $contentType = self::contentTypes['fileControllerDownload'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->fileControllerDownloadRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerDownload'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerDownloadRequest($id, string $contentType = self::contentTypes['fileControllerDownload'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fileControllerDownload'
            );
        }

        $resourcePath = '/sync-core/file/{id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerFileUploaded.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerFileUploaded'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileEntity
     */
    public function fileControllerFileUploaded($id, string $contentType = self::contentTypes['fileControllerFileUploaded'][0])
    {
        list($response) = $this->fileControllerFileUploadedWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation fileControllerFileUploadedWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerFileUploaded'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FileEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerFileUploadedWithHttpInfo($id, string $contentType = self::contentTypes['fileControllerFileUploaded'][0])
    {
        $request = $this->fileControllerFileUploadedRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerFileUploadedAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerFileUploaded'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerFileUploadedAsync($id, string $contentType = self::contentTypes['fileControllerFileUploaded'][0])
    {
        return $this->fileControllerFileUploadedAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerFileUploadedAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerFileUploaded'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerFileUploadedAsyncWithHttpInfo($id, string $contentType = self::contentTypes['fileControllerFileUploaded'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
        $request = $this->fileControllerFileUploadedRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerFileUploaded'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerFileUploaded'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerFileUploadedRequest($id, string $contentType = self::contentTypes['fileControllerFileUploaded'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fileControllerFileUploaded'
            );
        }

        $resourcePath = '/sync-core/file/{id}/uploaded';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'PUT',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileEntity
     */
    public function fileControllerItem($id, string $contentType = self::contentTypes['fileControllerItem'][0])
    {
        list($response) = $this->fileControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation fileControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FileEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['fileControllerItem'][0])
    {
        $request = $this->fileControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerItemAsync($id, string $contentType = self::contentTypes['fileControllerItem'][0])
    {
        return $this->fileControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['fileControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
        $request = $this->fileControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fileControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerItemRequest($id, string $contentType = self::contentTypes['fileControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling fileControllerItem'
            );
        }

        $resourcePath = '/sync-core/file/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto createFlowDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity
     */
    public function flowControllerCreate($createFlowDto, string $contentType = self::contentTypes['flowControllerCreate'][0])
    {
        list($response) = $this->flowControllerCreateWithHttpInfo($createFlowDto, $contentType);

        return $response;
    }

    /**
     * Operation flowControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerCreateWithHttpInfo($createFlowDto, string $contentType = self::contentTypes['flowControllerCreate'][0])
    {
        $request = $this->flowControllerCreateRequest($createFlowDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerCreateAsync($createFlowDto, string $contentType = self::contentTypes['flowControllerCreate'][0])
    {
        return $this->flowControllerCreateAsyncWithHttpInfo($createFlowDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerCreateAsyncWithHttpInfo($createFlowDto, string $contentType = self::contentTypes['flowControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
        $request = $this->flowControllerCreateRequest($createFlowDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerCreateRequest($createFlowDto, string $contentType = self::contentTypes['flowControllerCreate'][0])
    {
        // verify the required parameter 'createFlowDto' is set
        if (null === $createFlowDto || (is_array($createFlowDto) && 0 === count($createFlowDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createFlowDto when calling flowControllerCreate'
            );
        }

        $resourcePath = '/sync-core/flow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createFlowDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createFlowDto));
            } else {
                $httpBody = $createFlowDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerDelete.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest flowDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function flowControllerDelete($flowDeleteRequest, string $contentType = self::contentTypes['flowControllerDelete'][0])
    {
        list($response) = $this->flowControllerDeleteWithHttpInfo($flowDeleteRequest, $contentType);

        return $response;
    }

    /**
     * Operation flowControllerDeleteWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerDeleteWithHttpInfo($flowDeleteRequest, string $contentType = self::contentTypes['flowControllerDelete'][0])
    {
        $request = $this->flowControllerDeleteRequest($flowDeleteRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerDeleteAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerDeleteAsync($flowDeleteRequest, string $contentType = self::contentTypes['flowControllerDelete'][0])
    {
        return $this->flowControllerDeleteAsyncWithHttpInfo($flowDeleteRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerDeleteAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerDeleteAsyncWithHttpInfo($flowDeleteRequest, string $contentType = self::contentTypes['flowControllerDelete'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->flowControllerDeleteRequest($flowDeleteRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerDelete'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerDeleteRequest($flowDeleteRequest, string $contentType = self::contentTypes['flowControllerDelete'][0])
    {
        // verify the required parameter 'flowDeleteRequest' is set
        if (null === $flowDeleteRequest || (is_array($flowDeleteRequest) && 0 === count($flowDeleteRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flowDeleteRequest when calling flowControllerDelete'
            );
        }

        $resourcePath = '/sync-core/flow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($flowDeleteRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($flowDeleteRequest));
            } else {
                $httpBody = $flowDeleteRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity
     */
    public function flowControllerItem($id, string $contentType = self::contentTypes['flowControllerItem'][0])
    {
        list($response) = $this->flowControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation flowControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['flowControllerItem'][0])
    {
        $request = $this->flowControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerItemAsync($id, string $contentType = self::contentTypes['flowControllerItem'][0])
    {
        return $this->flowControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['flowControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
        $request = $this->flowControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerItemRequest($id, string $contentType = self::contentTypes['flowControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling flowControllerItem'
            );
        }

        $resourcePath = '/sync-core/flow/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerList.
     *
     * @param  string $poolMachineNames poolMachineNames (optional)
     * @param  string $siteId siteId (optional)
     * @param  string $page page (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList
     */
    public function flowControllerList($poolMachineNames = null, $siteId = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['flowControllerList'][0])
    {
        list($response) = $this->flowControllerListWithHttpInfo($poolMachineNames, $siteId, $page, $itemsPerPage, $contentType);

        return $response;
    }

    /**
     * Operation flowControllerListWithHttpInfo.
     *
     * @param  string $poolMachineNames (optional)
     * @param  string $siteId (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerListWithHttpInfo($poolMachineNames = null, $siteId = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['flowControllerList'][0])
    {
        $request = $this->flowControllerListRequest($poolMachineNames, $siteId, $page, $itemsPerPage, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerListAsync.
     *
     * @param  string $poolMachineNames (optional)
     * @param  string $siteId (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerListAsync($poolMachineNames = null, $siteId = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['flowControllerList'][0])
    {
        return $this->flowControllerListAsyncWithHttpInfo($poolMachineNames, $siteId, $page, $itemsPerPage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerListAsyncWithHttpInfo.
     *
     * @param  string $poolMachineNames (optional)
     * @param  string $siteId (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerListAsyncWithHttpInfo($poolMachineNames = null, $siteId = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['flowControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList';
        $request = $this->flowControllerListRequest($poolMachineNames, $siteId, $page, $itemsPerPage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerList'.
     *
     * @param  string $poolMachineNames (optional)
     * @param  string $siteId (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['flowControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerListRequest($poolMachineNames = null, $siteId = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['flowControllerList'][0])
    {
        $resourcePath = '/sync-core/flow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $poolMachineNames,
            'poolMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $siteId,
            'siteId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation healthControllerLive.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerLive'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response|\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response
     */
    public function healthControllerLive(string $contentType = self::contentTypes['healthControllerLive'][0])
    {
        list($response) = $this->healthControllerLiveWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation healthControllerLiveWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerLive'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response|\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function healthControllerLiveWithHttpInfo(string $contentType = self::contentTypes['healthControllerLive'][0])
    {
        $request = $this->healthControllerLiveRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 503:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation healthControllerLiveAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerLive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerLiveAsync(string $contentType = self::contentTypes['healthControllerLive'][0])
    {
        return $this->healthControllerLiveAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation healthControllerLiveAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerLive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerLiveAsyncWithHttpInfo(string $contentType = self::contentTypes['healthControllerLive'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response';
        $request = $this->healthControllerLiveRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'healthControllerLive'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerLive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function healthControllerLiveRequest(string $contentType = self::contentTypes['healthControllerLive'][0])
    {
        $resourcePath = '/sync-core/healthz/live';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation healthControllerReady.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerReady'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response|\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response
     */
    public function healthControllerReady(string $contentType = self::contentTypes['healthControllerReady'][0])
    {
        list($response) = $this->healthControllerReadyWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation healthControllerReadyWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerReady'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response|\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function healthControllerReadyWithHttpInfo(string $contentType = self::contentTypes['healthControllerReady'][0])
    {
        $request = $this->healthControllerReadyRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 503:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady503Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation healthControllerReadyAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerReady'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerReadyAsync(string $contentType = self::contentTypes['healthControllerReady'][0])
    {
        return $this->healthControllerReadyAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation healthControllerReadyAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerReady'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerReadyAsyncWithHttpInfo(string $contentType = self::contentTypes['healthControllerReady'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\HealthControllerReady200Response';
        $request = $this->healthControllerReadyRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'healthControllerReady'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['healthControllerReady'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function healthControllerReadyRequest(string $contentType = self::contentTypes['healthControllerReady'][0])
    {
        $resourcePath = '/sync-core/healthz/ready';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localFileControllerDownload.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerDownload'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function localFileControllerDownload($id, string $contentType = self::contentTypes['localFileControllerDownload'][0])
    {
        list($response) = $this->localFileControllerDownloadWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation localFileControllerDownloadWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerDownload'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localFileControllerDownloadWithHttpInfo($id, string $contentType = self::contentTypes['localFileControllerDownload'][0])
    {
        $request = $this->localFileControllerDownloadRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation localFileControllerDownloadAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerDownloadAsync($id, string $contentType = self::contentTypes['localFileControllerDownload'][0])
    {
        return $this->localFileControllerDownloadAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation localFileControllerDownloadAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerDownloadAsyncWithHttpInfo($id, string $contentType = self::contentTypes['localFileControllerDownload'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->localFileControllerDownloadRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'localFileControllerDownload'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerDownload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localFileControllerDownloadRequest($id, string $contentType = self::contentTypes['localFileControllerDownload'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling localFileControllerDownload'
            );
        }

        $resourcePath = '/sync-core/file/local/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localFileControllerUpload.
     *
     * @param  string $id id (required)
     * @param  \SplFileObject $file file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerUpload'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function localFileControllerUpload($id, $file = null, string $contentType = self::contentTypes['localFileControllerUpload'][0])
    {
        list($response) = $this->localFileControllerUploadWithHttpInfo($id, $file, $contentType);

        return $response;
    }

    /**
     * Operation localFileControllerUploadWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerUpload'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localFileControllerUploadWithHttpInfo($id, $file = null, string $contentType = self::contentTypes['localFileControllerUpload'][0])
    {
        $request = $this->localFileControllerUploadRequest($id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation localFileControllerUploadAsync.
     *
     * @param  string $id (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerUploadAsync($id, $file = null, string $contentType = self::contentTypes['localFileControllerUpload'][0])
    {
        return $this->localFileControllerUploadAsyncWithHttpInfo($id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation localFileControllerUploadAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerUploadAsyncWithHttpInfo($id, $file = null, string $contentType = self::contentTypes['localFileControllerUpload'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->localFileControllerUploadRequest($id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'localFileControllerUpload'.
     *
     * @param  string $id (required)
     * @param  \SplFileObject $file (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['localFileControllerUpload'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localFileControllerUploadRequest($id, $file = null, string $contentType = self::contentTypes['localFileControllerUpload'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling localFileControllerUpload'
            );
        }

        $resourcePath = '/sync-core/file/local/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if (null !== $file) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'PUT',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation loggingControllerList.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsRequest $loggingIdsRequest loggingIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loggingControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse
     */
    public function loggingControllerList($loggingIdsRequest, string $contentType = self::contentTypes['loggingControllerList'][0])
    {
        list($response) = $this->loggingControllerListWithHttpInfo($loggingIdsRequest, $contentType);

        return $response;
    }

    /**
     * Operation loggingControllerListWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsRequest $loggingIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loggingControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function loggingControllerListWithHttpInfo($loggingIdsRequest, string $contentType = self::contentTypes['loggingControllerList'][0])
    {
        $request = $this->loggingControllerListRequest($loggingIdsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation loggingControllerListAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsRequest $loggingIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loggingControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loggingControllerListAsync($loggingIdsRequest, string $contentType = self::contentTypes['loggingControllerList'][0])
    {
        return $this->loggingControllerListAsyncWithHttpInfo($loggingIdsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation loggingControllerListAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsRequest $loggingIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loggingControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function loggingControllerListAsyncWithHttpInfo($loggingIdsRequest, string $contentType = self::contentTypes['loggingControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsResponse';
        $request = $this->loggingControllerListRequest($loggingIdsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'loggingControllerList'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\LoggingIdsRequest $loggingIdsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['loggingControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function loggingControllerListRequest($loggingIdsRequest, string $contentType = self::contentTypes['loggingControllerList'][0])
    {
        // verify the required parameter 'loggingIdsRequest' is set
        if (null === $loggingIdsRequest || (is_array($loggingIdsRequest) && 0 === count($loggingIdsRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loggingIdsRequest when calling loggingControllerList'
            );
        }

        $resourcePath = '/sync-core/logging/map-ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loggingIdsRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($loggingIdsRequest));
            } else {
                $httpBody = $loggingIdsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto createMigrationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity
     */
    public function migrationControllerCreate($createMigrationDto, string $contentType = self::contentTypes['migrationControllerCreate'][0])
    {
        list($response) = $this->migrationControllerCreateWithHttpInfo($createMigrationDto, $contentType);

        return $response;
    }

    /**
     * Operation migrationControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerCreateWithHttpInfo($createMigrationDto, string $contentType = self::contentTypes['migrationControllerCreate'][0])
    {
        $request = $this->migrationControllerCreateRequest($createMigrationDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerCreateAsync($createMigrationDto, string $contentType = self::contentTypes['migrationControllerCreate'][0])
    {
        return $this->migrationControllerCreateAsyncWithHttpInfo($createMigrationDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerCreateAsyncWithHttpInfo($createMigrationDto, string $contentType = self::contentTypes['migrationControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
        $request = $this->migrationControllerCreateRequest($createMigrationDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerCreateRequest($createMigrationDto, string $contentType = self::contentTypes['migrationControllerCreate'][0])
    {
        // verify the required parameter 'createMigrationDto' is set
        if (null === $createMigrationDto || (is_array($createMigrationDto) && 0 === count($createMigrationDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createMigrationDto when calling migrationControllerCreate'
            );
        }

        $resourcePath = '/sync-core/migration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createMigrationDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createMigrationDto));
            } else {
                $httpBody = $createMigrationDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerDelete.
     *
     * @param  string $id id (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity
     */
    public function migrationControllerDelete($id, $body, string $contentType = self::contentTypes['migrationControllerDelete'][0])
    {
        list($response) = $this->migrationControllerDeleteWithHttpInfo($id, $body, $contentType);

        return $response;
    }

    /**
     * Operation migrationControllerDeleteWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerDeleteWithHttpInfo($id, $body, string $contentType = self::contentTypes['migrationControllerDelete'][0])
    {
        $request = $this->migrationControllerDeleteRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerDeleteAsync.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerDeleteAsync($id, $body, string $contentType = self::contentTypes['migrationControllerDelete'][0])
    {
        return $this->migrationControllerDeleteAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerDeleteAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerDeleteAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['migrationControllerDelete'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
        $request = $this->migrationControllerDeleteRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerDelete'.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerDeleteRequest($id, $body, string $contentType = self::contentTypes['migrationControllerDelete'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling migrationControllerDelete'
            );
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling migrationControllerDelete'
            );
        }

        $resourcePath = '/sync-core/migration/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity
     */
    public function migrationControllerItem($id, string $contentType = self::contentTypes['migrationControllerItem'][0])
    {
        list($response) = $this->migrationControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation migrationControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['migrationControllerItem'][0])
    {
        $request = $this->migrationControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerItemAsync($id, string $contentType = self::contentTypes['migrationControllerItem'][0])
    {
        return $this->migrationControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['migrationControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
        $request = $this->migrationControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerItemRequest($id, string $contentType = self::contentTypes['migrationControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling migrationControllerItem'
            );
        }

        $resourcePath = '/sync-core/migration/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerList.
     *
     * @param  string $groupByEntityTypeAndFlowAndSite groupByEntityTypeAndFlowAndSite (optional)
     * @param  string $entityTypeMachineName entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName entityTypeNamespaceMachineName (optional)
     * @param  string $flowMachineName flowMachineName (optional)
     * @param  string $statuses statuses (optional)
     * @param  string $types types (optional)
     * @param  string $siteUuid siteUuid (optional)
     * @param  string $siteId siteId (optional)
     * @param  string $initialSetup initialSetup (optional)
     * @param  string $page page (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList
     */
    public function migrationControllerList($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['migrationControllerList'][0])
    {
        list($response) = $this->migrationControllerListWithHttpInfo($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $page, $itemsPerPage, $contentType);

        return $response;
    }

    /**
     * Operation migrationControllerListWithHttpInfo.
     *
     * @param  string $groupByEntityTypeAndFlowAndSite (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $flowMachineName (optional)
     * @param  string $statuses (optional)
     * @param  string $types (optional)
     * @param  string $siteUuid (optional)
     * @param  string $siteId (optional)
     * @param  string $initialSetup (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerListWithHttpInfo($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['migrationControllerList'][0])
    {
        $request = $this->migrationControllerListRequest($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $page, $itemsPerPage, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerListAsync.
     *
     * @param  string $groupByEntityTypeAndFlowAndSite (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $flowMachineName (optional)
     * @param  string $statuses (optional)
     * @param  string $types (optional)
     * @param  string $siteUuid (optional)
     * @param  string $siteId (optional)
     * @param  string $initialSetup (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerListAsync($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['migrationControllerList'][0])
    {
        return $this->migrationControllerListAsyncWithHttpInfo($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $page, $itemsPerPage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerListAsyncWithHttpInfo.
     *
     * @param  string $groupByEntityTypeAndFlowAndSite (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $flowMachineName (optional)
     * @param  string $statuses (optional)
     * @param  string $types (optional)
     * @param  string $siteUuid (optional)
     * @param  string $siteId (optional)
     * @param  string $initialSetup (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerListAsyncWithHttpInfo($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['migrationControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList';
        $request = $this->migrationControllerListRequest($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $page, $itemsPerPage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerList'.
     *
     * @param  string $groupByEntityTypeAndFlowAndSite (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $flowMachineName (optional)
     * @param  string $statuses (optional)
     * @param  string $types (optional)
     * @param  string $siteUuid (optional)
     * @param  string $siteId (optional)
     * @param  string $initialSetup (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerListRequest($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['migrationControllerList'][0])
    {
        $resourcePath = '/sync-core/migration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupByEntityTypeAndFlowAndSite,
            'groupByEntityTypeAndFlowAndSite', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeMachineName,
            'entityTypeMachineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeNamespaceMachineName,
            'entityTypeNamespaceMachineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $flowMachineName,
            'flowMachineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $types,
            'types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $siteUuid,
            'siteUuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $siteId,
            'siteId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $initialSetup,
            'initialSetup', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerSummary.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary
     */
    public function migrationControllerSummary($id, string $contentType = self::contentTypes['migrationControllerSummary'][0])
    {
        list($response) = $this->migrationControllerSummaryWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation migrationControllerSummaryWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerSummaryWithHttpInfo($id, string $contentType = self::contentTypes['migrationControllerSummary'][0])
    {
        $request = $this->migrationControllerSummaryRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerSummaryAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerSummaryAsync($id, string $contentType = self::contentTypes['migrationControllerSummary'][0])
    {
        return $this->migrationControllerSummaryAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerSummaryAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerSummaryAsyncWithHttpInfo($id, string $contentType = self::contentTypes['migrationControllerSummary'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary';
        $request = $this->migrationControllerSummaryRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerSummary'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['migrationControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerSummaryRequest($id, string $contentType = self::contentTypes['migrationControllerSummary'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling migrationControllerSummary'
            );
        }

        $resourcePath = '/sync-core/migration/{id}/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation poolControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto createPoolDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity
     */
    public function poolControllerCreate($createPoolDto, string $contentType = self::contentTypes['poolControllerCreate'][0])
    {
        list($response) = $this->poolControllerCreateWithHttpInfo($createPoolDto, $contentType);

        return $response;
    }

    /**
     * Operation poolControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolControllerCreateWithHttpInfo($createPoolDto, string $contentType = self::contentTypes['poolControllerCreate'][0])
    {
        $request = $this->poolControllerCreateRequest($createPoolDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerCreateAsync($createPoolDto, string $contentType = self::contentTypes['poolControllerCreate'][0])
    {
        return $this->poolControllerCreateAsyncWithHttpInfo($createPoolDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation poolControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerCreateAsyncWithHttpInfo($createPoolDto, string $contentType = self::contentTypes['poolControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
        $request = $this->poolControllerCreateRequest($createPoolDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'poolControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function poolControllerCreateRequest($createPoolDto, string $contentType = self::contentTypes['poolControllerCreate'][0])
    {
        // verify the required parameter 'createPoolDto' is set
        if (null === $createPoolDto || (is_array($createPoolDto) && 0 === count($createPoolDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createPoolDto when calling poolControllerCreate'
            );
        }

        $resourcePath = '/sync-core/pool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createPoolDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createPoolDto));
            } else {
                $httpBody = $createPoolDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation poolControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity
     */
    public function poolControllerItem($id, string $contentType = self::contentTypes['poolControllerItem'][0])
    {
        list($response) = $this->poolControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation poolControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['poolControllerItem'][0])
    {
        $request = $this->poolControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerItemAsync($id, string $contentType = self::contentTypes['poolControllerItem'][0])
    {
        return $this->poolControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation poolControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['poolControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
        $request = $this->poolControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'poolControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function poolControllerItemRequest($id, string $contentType = self::contentTypes['poolControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling poolControllerItem'
            );
        }

        $resourcePath = '/sync-core/pool/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation poolControllerList.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]
     */
    public function poolControllerList(string $contentType = self::contentTypes['poolControllerList'][0])
    {
        list($response) = $this->poolControllerListWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation poolControllerListWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function poolControllerListWithHttpInfo(string $contentType = self::contentTypes['poolControllerList'][0])
    {
        $request = $this->poolControllerListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolControllerListAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerListAsync(string $contentType = self::contentTypes['poolControllerList'][0])
    {
        return $this->poolControllerListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation poolControllerListAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerListAsyncWithHttpInfo(string $contentType = self::contentTypes['poolControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]';
        $request = $this->poolControllerListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'poolControllerList'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['poolControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function poolControllerListRequest(string $contentType = self::contentTypes['poolControllerList'][0])
    {
        $resourcePath = '/sync-core/pool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation previewsControllerList.
     *
     * @param  string $existsLocally existsLocally (optional)
     * @param  string $deletedLocally deletedLocally (optional)
     * @param  string $deleted deleted (optional)
     * @param  string $sourceSiteId sourceSiteId (optional)
     * @param  string $entityTypeMachineNames entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest publishedLatest (optional)
     * @param  string $publishedEarliest publishedEarliest (optional)
     * @param  string $poolMachineNames poolMachineNames (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $page page (optional)
     * @param  string $search search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse
     */
    public function previewsControllerList($existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerList'][0])
    {
        list($response) = $this->previewsControllerListWithHttpInfo($existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType);

        return $response;
    }

    /**
     * Operation previewsControllerListWithHttpInfo.
     *
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewsControllerListWithHttpInfo($existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerList'][0])
    {
        $request = $this->previewsControllerListRequest($existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation previewsControllerListAsync.
     *
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewsControllerListAsync($existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerList'][0])
    {
        return $this->previewsControllerListAsyncWithHttpInfo($existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation previewsControllerListAsyncWithHttpInfo.
     *
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewsControllerListAsyncWithHttpInfo($existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse';
        $request = $this->previewsControllerListRequest($existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'previewsControllerList'.
     *
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function previewsControllerListRequest($existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerList'][0])
    {
        $resourcePath = '/sync-core/previews';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $existsLocally,
            'existsLocally', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deletedLocally,
            'deletedLocally', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deleted,
            'deleted', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sourceSiteId,
            'sourceSiteId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeMachineNames,
            'entityTypeMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeNamespaceMachineNames,
            'entityTypeNamespaceMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publishedLatest,
            'publishedLatest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publishedEarliest,
            'publishedEarliest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $poolMachineNames,
            'poolMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation previewsControllerListForFlow.
     *
     * @param  string $flowMachineName flowMachineName (required)
     * @param  string $existsLocally existsLocally (optional)
     * @param  string $deletedLocally deletedLocally (optional)
     * @param  string $deleted deleted (optional)
     * @param  string $sourceSiteId sourceSiteId (optional)
     * @param  string $entityTypeMachineNames entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest publishedLatest (optional)
     * @param  string $publishedEarliest publishedEarliest (optional)
     * @param  string $poolMachineNames poolMachineNames (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $page page (optional)
     * @param  string $search search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerListForFlow'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse
     */
    public function previewsControllerListForFlow($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerListForFlow'][0])
    {
        list($response) = $this->previewsControllerListForFlowWithHttpInfo($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType);

        return $response;
    }

    /**
     * Operation previewsControllerListForFlowWithHttpInfo.
     *
     * @param  string $flowMachineName (required)
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerListForFlow'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewsControllerListForFlowWithHttpInfo($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerListForFlow'][0])
    {
        $request = $this->previewsControllerListForFlowRequest($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation previewsControllerListForFlowAsync.
     *
     * @param  string $flowMachineName (required)
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerListForFlow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewsControllerListForFlowAsync($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerListForFlow'][0])
    {
        return $this->previewsControllerListForFlowAsyncWithHttpInfo($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation previewsControllerListForFlowAsyncWithHttpInfo.
     *
     * @param  string $flowMachineName (required)
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerListForFlow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewsControllerListForFlowAsyncWithHttpInfo($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerListForFlow'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse';
        $request = $this->previewsControllerListForFlowRequest($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'previewsControllerListForFlow'.
     *
     * @param  string $flowMachineName (required)
     * @param  string $existsLocally (optional)
     * @param  string $deletedLocally (optional)
     * @param  string $deleted (optional)
     * @param  string $sourceSiteId (optional)
     * @param  string $entityTypeMachineNames (optional)
     * @param  string $entityTypeNamespaceMachineNames (optional)
     * @param  string $publishedLatest (optional)
     * @param  string $publishedEarliest (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewsControllerListForFlow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function previewsControllerListForFlowRequest($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null, string $contentType = self::contentTypes['previewsControllerListForFlow'][0])
    {
        // verify the required parameter 'flowMachineName' is set
        if (null === $flowMachineName || (is_array($flowMachineName) && 0 === count($flowMachineName))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flowMachineName when calling previewsControllerListForFlow'
            );
        }

        $resourcePath = '/sync-core/previews/{flowMachineName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $existsLocally,
            'existsLocally', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deletedLocally,
            'deletedLocally', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $deleted,
            'deleted', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sourceSiteId,
            'sourceSiteId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeMachineNames,
            'entityTypeMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeNamespaceMachineNames,
            'entityTypeNamespaceMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publishedLatest,
            'publishedLatest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $publishedEarliest,
            'publishedEarliest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $poolMachineNames,
            'poolMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if (null !== $flowMachineName) {
            $resourcePath = str_replace(
                '{'.'flowMachineName'.'}',
                ObjectSerializer::toPathValue($flowMachineName),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity
     */
    public function projectControllerItem($id, string $contentType = self::contentTypes['projectControllerItem'][0])
    {
        list($response) = $this->projectControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation projectControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['projectControllerItem'][0])
    {
        $request = $this->projectControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemAsync($id, string $contentType = self::contentTypes['projectControllerItem'][0])
    {
        return $this->projectControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation projectControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['projectControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
        $request = $this->projectControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'projectControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectControllerItemRequest($id, string $contentType = self::contentTypes['projectControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling projectControllerItem'
            );
        }

        $resourcePath = '/sync-core/project/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectControllerItemByUuid.
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity
     */
    public function projectControllerItemByUuid($uuid, string $contentType = self::contentTypes['projectControllerItemByUuid'][0])
    {
        list($response) = $this->projectControllerItemByUuidWithHttpInfo($uuid, $contentType);

        return $response;
    }

    /**
     * Operation projectControllerItemByUuidWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectControllerItemByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['projectControllerItemByUuid'][0])
    {
        $request = $this->projectControllerItemByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectControllerItemByUuidAsync.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemByUuidAsync($uuid, string $contentType = self::contentTypes['projectControllerItemByUuid'][0])
    {
        return $this->projectControllerItemByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation projectControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['projectControllerItemByUuid'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
        $request = $this->projectControllerItemByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'projectControllerItemByUuid'.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['projectControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectControllerItemByUuidRequest($uuid, string $contentType = self::contentTypes['projectControllerItemByUuid'][0])
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling projectControllerItemByUuid'
            );
        }

        $resourcePath = '/sync-core/project/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto createRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult
     */
    public function remoteEntityRevisionControllerCreate($createRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerCreate'][0])
    {
        list($response) = $this->remoteEntityRevisionControllerCreateWithHttpInfo($createRemoteEntityRevisionDto, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerCreateWithHttpInfo($createRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerCreate'][0])
    {
        $request = $this->remoteEntityRevisionControllerCreateRequest($createRemoteEntityRevisionDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerCreateAsync($createRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerCreate'][0])
    {
        return $this->remoteEntityRevisionControllerCreateAsyncWithHttpInfo($createRemoteEntityRevisionDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerCreateAsyncWithHttpInfo($createRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult';
        $request = $this->remoteEntityRevisionControllerCreateRequest($createRemoteEntityRevisionDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerCreateRequest($createRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerCreate'][0])
    {
        // verify the required parameter 'createRemoteEntityRevisionDto' is set
        if (null === $createRemoteEntityRevisionDto || (is_array($createRemoteEntityRevisionDto) && 0 === count($createRemoteEntityRevisionDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createRemoteEntityRevisionDto when calling remoteEntityRevisionControllerCreate'
            );
        }

        $resourcePath = '/sync-core/remote-entity-revision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createRemoteEntityRevisionDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createRemoteEntityRevisionDto));
            } else {
                $httpBody = $createRemoteEntityRevisionDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerDelete.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto deleteRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function remoteEntityRevisionControllerDelete($deleteRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerDelete'][0])
    {
        list($response) = $this->remoteEntityRevisionControllerDeleteWithHttpInfo($deleteRemoteEntityRevisionDto, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerDeleteWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerDeleteWithHttpInfo($deleteRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerDelete'][0])
    {
        $request = $this->remoteEntityRevisionControllerDeleteRequest($deleteRemoteEntityRevisionDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerDeleteAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerDeleteAsync($deleteRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerDelete'][0])
    {
        return $this->remoteEntityRevisionControllerDeleteAsyncWithHttpInfo($deleteRemoteEntityRevisionDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerDeleteAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerDeleteAsyncWithHttpInfo($deleteRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerDelete'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->remoteEntityRevisionControllerDeleteRequest($deleteRemoteEntityRevisionDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerDelete'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerDeleteRequest($deleteRemoteEntityRevisionDto, string $contentType = self::contentTypes['remoteEntityRevisionControllerDelete'][0])
    {
        // verify the required parameter 'deleteRemoteEntityRevisionDto' is set
        if (null === $deleteRemoteEntityRevisionDto || (is_array($deleteRemoteEntityRevisionDto) && 0 === count($deleteRemoteEntityRevisionDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deleteRemoteEntityRevisionDto when calling remoteEntityRevisionControllerDelete'
            );
        }

        $resourcePath = '/sync-core/remote-entity-revision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deleteRemoteEntityRevisionDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($deleteRemoteEntityRevisionDto));
            } else {
                $httpBody = $deleteRemoteEntityRevisionDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity
     */
    public function remoteEntityRevisionControllerItem($id, string $contentType = self::contentTypes['remoteEntityRevisionControllerItem'][0])
    {
        list($response) = $this->remoteEntityRevisionControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityRevisionControllerItem'][0])
    {
        $request = $this->remoteEntityRevisionControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerItemAsync($id, string $contentType = self::contentTypes['remoteEntityRevisionControllerItem'][0])
    {
        return $this->remoteEntityRevisionControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityRevisionControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity';
        $request = $this->remoteEntityRevisionControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerItemRequest($id, string $contentType = self::contentTypes['remoteEntityRevisionControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling remoteEntityRevisionControllerItem'
            );
        }

        $resourcePath = '/sync-core/remote-entity-revision/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerList.
     *
     * @param  string $latest latest (optional)
     * @param  string $forCustomer forCustomer (optional)
     * @param  string $poolMachineName poolMachineName (optional)
     * @param  string $entityTypeMachineName entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName entityTypeNamespaceMachineName (optional)
     * @param  string $page page (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList
     */
    public function remoteEntityRevisionControllerList($latest = null, $forCustomer = null, $poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerList'][0])
    {
        list($response) = $this->remoteEntityRevisionControllerListWithHttpInfo($latest, $forCustomer, $poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page, $itemsPerPage, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerListWithHttpInfo.
     *
     * @param  string $latest (optional)
     * @param  string $forCustomer (optional)
     * @param  string $poolMachineName (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerListWithHttpInfo($latest = null, $forCustomer = null, $poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerList'][0])
    {
        $request = $this->remoteEntityRevisionControllerListRequest($latest, $forCustomer, $poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page, $itemsPerPage, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerListAsync.
     *
     * @param  string $latest (optional)
     * @param  string $forCustomer (optional)
     * @param  string $poolMachineName (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerListAsync($latest = null, $forCustomer = null, $poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerList'][0])
    {
        return $this->remoteEntityRevisionControllerListAsyncWithHttpInfo($latest, $forCustomer, $poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page, $itemsPerPage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerListAsyncWithHttpInfo.
     *
     * @param  string $latest (optional)
     * @param  string $forCustomer (optional)
     * @param  string $poolMachineName (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerListAsyncWithHttpInfo($latest = null, $forCustomer = null, $poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList';
        $request = $this->remoteEntityRevisionControllerListRequest($latest, $forCustomer, $poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page, $itemsPerPage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerList'.
     *
     * @param  string $latest (optional)
     * @param  string $forCustomer (optional)
     * @param  string $poolMachineName (optional)
     * @param  string $entityTypeMachineName (optional)
     * @param  string $entityTypeNamespaceMachineName (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerListRequest($latest = null, $forCustomer = null, $poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerList'][0])
    {
        $resourcePath = '/sync-core/remote-entity-revision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latest,
            'latest', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $forCustomer,
            'forCustomer', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $poolMachineName,
            'poolMachineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeMachineName,
            'entityTypeMachineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeNamespaceMachineName,
            'entityTypeNamespaceMachineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerSerialize.
     *
     * @param  string $id id (required)
     * @param  string $values values (optional)
     * @param  string $structure structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerSerialize'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return string
     */
    public function remoteEntityRevisionControllerSerialize($id, $values = null, $structure = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerSerialize'][0])
    {
        list($response) = $this->remoteEntityRevisionControllerSerializeWithHttpInfo($id, $values, $structure, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerSerializeWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $values (optional)
     * @param  string $structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerSerialize'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerSerializeWithHttpInfo($id, $values = null, $structure = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerSerialize'][0])
    {
        $request = $this->remoteEntityRevisionControllerSerializeRequest($id, $values, $structure, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerSerializeAsync.
     *
     * @param  string $id (required)
     * @param  string $values (optional)
     * @param  string $structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerSerialize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerSerializeAsync($id, $values = null, $structure = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerSerialize'][0])
    {
        return $this->remoteEntityRevisionControllerSerializeAsyncWithHttpInfo($id, $values, $structure, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerSerializeAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $values (optional)
     * @param  string $structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerSerialize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerSerializeAsyncWithHttpInfo($id, $values = null, $structure = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerSerialize'][0])
    {
        $returnType = 'string';
        $request = $this->remoteEntityRevisionControllerSerializeRequest($id, $values, $structure, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerSerialize'.
     *
     * @param  string $id (required)
     * @param  string $values (optional)
     * @param  string $structure (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityRevisionControllerSerialize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerSerializeRequest($id, $values = null, $structure = null, string $contentType = self::contentTypes['remoteEntityRevisionControllerSerialize'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling remoteEntityRevisionControllerSerialize'
            );
        }

        $resourcePath = '/sync-core/remote-entity-revision/{id}/serialize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $values,
            'values', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $structure,
            'structure', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['text/yaml'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeControllerByMachineName.
     *
     * @param  string $machineName machineName (required)
     * @param  string $namespaceMachineName namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerByMachineName'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity
     */
    public function remoteEntityTypeControllerByMachineName($machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeControllerByMachineName'][0])
    {
        list($response) = $this->remoteEntityTypeControllerByMachineNameWithHttpInfo($machineName, $namespaceMachineName, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityTypeControllerByMachineNameWithHttpInfo.
     *
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerByMachineName'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeControllerByMachineNameWithHttpInfo($machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeControllerByMachineName'][0])
    {
        $request = $this->remoteEntityTypeControllerByMachineNameRequest($machineName, $namespaceMachineName, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeControllerByMachineNameAsync.
     *
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerByMachineName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerByMachineNameAsync($machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeControllerByMachineName'][0])
    {
        return $this->remoteEntityTypeControllerByMachineNameAsyncWithHttpInfo($machineName, $namespaceMachineName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeControllerByMachineNameAsyncWithHttpInfo.
     *
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerByMachineName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerByMachineNameAsyncWithHttpInfo($machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeControllerByMachineName'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
        $request = $this->remoteEntityTypeControllerByMachineNameRequest($machineName, $namespaceMachineName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeControllerByMachineName'.
     *
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerByMachineName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeControllerByMachineNameRequest($machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeControllerByMachineName'][0])
    {
        // verify the required parameter 'machineName' is set
        if (null === $machineName || (is_array($machineName) && 0 === count($machineName))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $machineName when calling remoteEntityTypeControllerByMachineName'
            );
        }

        // verify the required parameter 'namespaceMachineName' is set
        if (null === $namespaceMachineName || (is_array($namespaceMachineName) && 0 === count($namespaceMachineName))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespaceMachineName when calling remoteEntityTypeControllerByMachineName'
            );
        }

        $resourcePath = '/sync-core/remote-entity-type/by-machine-name/{namespaceMachineName}/{machineName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $machineName) {
            $resourcePath = str_replace(
                '{'.'machineName'.'}',
                ObjectSerializer::toPathValue($machineName),
                $resourcePath
            );
        }
        // path params
        if (null !== $namespaceMachineName) {
            $resourcePath = str_replace(
                '{'.'namespaceMachineName'.'}',
                ObjectSerializer::toPathValue($namespaceMachineName),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity
     */
    public function remoteEntityTypeControllerItem($id, string $contentType = self::contentTypes['remoteEntityTypeControllerItem'][0])
    {
        list($response) = $this->remoteEntityTypeControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityTypeControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityTypeControllerItem'][0])
    {
        $request = $this->remoteEntityTypeControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerItemAsync($id, string $contentType = self::contentTypes['remoteEntityTypeControllerItem'][0])
    {
        return $this->remoteEntityTypeControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityTypeControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
        $request = $this->remoteEntityTypeControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeControllerItemRequest($id, string $contentType = self::contentTypes['remoteEntityTypeControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling remoteEntityTypeControllerItem'
            );
        }

        $resourcePath = '/sync-core/remote-entity-type/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeControllerList.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]
     */
    public function remoteEntityTypeControllerList(string $contentType = self::contentTypes['remoteEntityTypeControllerList'][0])
    {
        list($response) = $this->remoteEntityTypeControllerListWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation remoteEntityTypeControllerListWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeControllerListWithHttpInfo(string $contentType = self::contentTypes['remoteEntityTypeControllerList'][0])
    {
        $request = $this->remoteEntityTypeControllerListRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeControllerListAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerListAsync(string $contentType = self::contentTypes['remoteEntityTypeControllerList'][0])
    {
        return $this->remoteEntityTypeControllerListAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeControllerListAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerListAsyncWithHttpInfo(string $contentType = self::contentTypes['remoteEntityTypeControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]';
        $request = $this->remoteEntityTypeControllerListRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeControllerList'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeControllerListRequest(string $contentType = self::contentTypes['remoteEntityTypeControllerList'][0])
    {
        $resourcePath = '/sync-core/remote-entity-type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto createRemoteEntityTypeVersionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity
     */
    public function remoteEntityTypeVersionControllerCreate($createRemoteEntityTypeVersionDto, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerCreate'][0])
    {
        list($response) = $this->remoteEntityTypeVersionControllerCreateWithHttpInfo($createRemoteEntityTypeVersionDto, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeVersionControllerCreateWithHttpInfo($createRemoteEntityTypeVersionDto, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerCreate'][0])
    {
        $request = $this->remoteEntityTypeVersionControllerCreateRequest($createRemoteEntityTypeVersionDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerCreateAsync($createRemoteEntityTypeVersionDto, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerCreate'][0])
    {
        return $this->remoteEntityTypeVersionControllerCreateAsyncWithHttpInfo($createRemoteEntityTypeVersionDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerCreateAsyncWithHttpInfo($createRemoteEntityTypeVersionDto, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
        $request = $this->remoteEntityTypeVersionControllerCreateRequest($createRemoteEntityTypeVersionDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeVersionControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeVersionControllerCreateRequest($createRemoteEntityTypeVersionDto, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerCreate'][0])
    {
        // verify the required parameter 'createRemoteEntityTypeVersionDto' is set
        if (null === $createRemoteEntityTypeVersionDto || (is_array($createRemoteEntityTypeVersionDto) && 0 === count($createRemoteEntityTypeVersionDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createRemoteEntityTypeVersionDto when calling remoteEntityTypeVersionControllerCreate'
            );
        }

        $resourcePath = '/sync-core/remote-entity-type-version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createRemoteEntityTypeVersionDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createRemoteEntityTypeVersionDto));
            } else {
                $httpBody = $createRemoteEntityTypeVersionDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsage.
     *
     * @param  string $versionId versionId (required)
     * @param  string $machineName machineName (required)
     * @param  string $namespaceMachineName namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage
     */
    public function remoteEntityTypeVersionControllerGetVersionUsage($versionId, $machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'][0])
    {
        list($response) = $this->remoteEntityTypeVersionControllerGetVersionUsageWithHttpInfo($versionId, $machineName, $namespaceMachineName, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsageWithHttpInfo.
     *
     * @param  string $versionId (required)
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageWithHttpInfo($versionId, $machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'][0])
    {
        $request = $this->remoteEntityTypeVersionControllerGetVersionUsageRequest($versionId, $machineName, $namespaceMachineName, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsageAsync.
     *
     * @param  string $versionId (required)
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageAsync($versionId, $machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'][0])
    {
        return $this->remoteEntityTypeVersionControllerGetVersionUsageAsyncWithHttpInfo($versionId, $machineName, $namespaceMachineName, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsageAsyncWithHttpInfo.
     *
     * @param  string $versionId (required)
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageAsyncWithHttpInfo($versionId, $machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage';
        $request = $this->remoteEntityTypeVersionControllerGetVersionUsageRequest($versionId, $machineName, $namespaceMachineName, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeVersionControllerGetVersionUsage'.
     *
     * @param  string $versionId (required)
     * @param  string $machineName (required)
     * @param  string $namespaceMachineName (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageRequest($versionId, $machineName, $namespaceMachineName, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerGetVersionUsage'][0])
    {
        // verify the required parameter 'versionId' is set
        if (null === $versionId || (is_array($versionId) && 0 === count($versionId))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $versionId when calling remoteEntityTypeVersionControllerGetVersionUsage'
            );
        }

        // verify the required parameter 'machineName' is set
        if (null === $machineName || (is_array($machineName) && 0 === count($machineName))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $machineName when calling remoteEntityTypeVersionControllerGetVersionUsage'
            );
        }

        // verify the required parameter 'namespaceMachineName' is set
        if (null === $namespaceMachineName || (is_array($namespaceMachineName) && 0 === count($namespaceMachineName))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $namespaceMachineName when calling remoteEntityTypeVersionControllerGetVersionUsage'
            );
        }

        $resourcePath = '/sync-core/remote-entity-type-version/differences/{namespaceMachineName}/{machineName}/{versionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $versionId) {
            $resourcePath = str_replace(
                '{'.'versionId'.'}',
                ObjectSerializer::toPathValue($versionId),
                $resourcePath
            );
        }
        // path params
        if (null !== $machineName) {
            $resourcePath = str_replace(
                '{'.'machineName'.'}',
                ObjectSerializer::toPathValue($machineName),
                $resourcePath
            );
        }
        // path params
        if (null !== $namespaceMachineName) {
            $resourcePath = str_replace(
                '{'.'namespaceMachineName'.'}',
                ObjectSerializer::toPathValue($namespaceMachineName),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeVersionControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity
     */
    public function remoteEntityTypeVersionControllerItem($id, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerItem'][0])
    {
        list($response) = $this->remoteEntityTypeVersionControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityTypeVersionControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeVersionControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerItem'][0])
    {
        $request = $this->remoteEntityTypeVersionControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeVersionControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerItemAsync($id, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerItem'][0])
    {
        return $this->remoteEntityTypeVersionControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeVersionControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
        $request = $this->remoteEntityTypeVersionControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeVersionControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityTypeVersionControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeVersionControllerItemRequest($id, string $contentType = self::contentTypes['remoteEntityTypeVersionControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling remoteEntityTypeVersionControllerItem'
            );
        }

        $resourcePath = '/sync-core/remote-entity-type-version/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityUsageControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity
     */
    public function remoteEntityUsageControllerItem($id, string $contentType = self::contentTypes['remoteEntityUsageControllerItem'][0])
    {
        list($response) = $this->remoteEntityUsageControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityUsageControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityUsageControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityUsageControllerItem'][0])
    {
        $request = $this->remoteEntityUsageControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityUsageControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerItemAsync($id, string $contentType = self::contentTypes['remoteEntityUsageControllerItem'][0])
    {
        return $this->remoteEntityUsageControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityUsageControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['remoteEntityUsageControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity';
        $request = $this->remoteEntityUsageControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityUsageControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityUsageControllerItemRequest($id, string $contentType = self::contentTypes['remoteEntityUsageControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling remoteEntityUsageControllerItem'
            );
        }

        $resourcePath = '/sync-core/remote-entity-usage/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityUsageControllerList.
     *
     * @param  string $entityTypeId entityTypeId (optional)
     * @param  string $siteId siteId (optional)
     * @param  string $entityId entityId (optional)
     * @param  string $remoteUniqueId remoteUniqueId (optional)
     * @param  string $remoteUuid remoteUuid (optional)
     * @param  string $page page (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse
     */
    public function remoteEntityUsageControllerList($entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityUsageControllerList'][0])
    {
        list($response) = $this->remoteEntityUsageControllerListWithHttpInfo($entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid, $page, $itemsPerPage, $contentType);

        return $response;
    }

    /**
     * Operation remoteEntityUsageControllerListWithHttpInfo.
     *
     * @param  string $entityTypeId (optional)
     * @param  string $siteId (optional)
     * @param  string $entityId (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $remoteUuid (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityUsageControllerListWithHttpInfo($entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityUsageControllerList'][0])
    {
        $request = $this->remoteEntityUsageControllerListRequest($entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid, $page, $itemsPerPage, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityUsageControllerListAsync.
     *
     * @param  string $entityTypeId (optional)
     * @param  string $siteId (optional)
     * @param  string $entityId (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $remoteUuid (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerListAsync($entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityUsageControllerList'][0])
    {
        return $this->remoteEntityUsageControllerListAsyncWithHttpInfo($entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid, $page, $itemsPerPage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityUsageControllerListAsyncWithHttpInfo.
     *
     * @param  string $entityTypeId (optional)
     * @param  string $siteId (optional)
     * @param  string $entityId (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $remoteUuid (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerListAsyncWithHttpInfo($entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityUsageControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse';
        $request = $this->remoteEntityUsageControllerListRequest($entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid, $page, $itemsPerPage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityUsageControllerList'.
     *
     * @param  string $entityTypeId (optional)
     * @param  string $siteId (optional)
     * @param  string $entityId (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $remoteUuid (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['remoteEntityUsageControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityUsageControllerListRequest($entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['remoteEntityUsageControllerList'][0])
    {
        $resourcePath = '/sync-core/remote-entity-usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityTypeId,
            'entityTypeId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $siteId,
            'siteId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityId,
            'entityId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $remoteUniqueId,
            'remoteUniqueId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $remoteUuid,
            'remoteUuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerGetRequests.
     *
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $page page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetRequests'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList
     */
    public function siteControllerGetRequests($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['siteControllerGetRequests'][0])
    {
        list($response) = $this->siteControllerGetRequestsWithHttpInfo($itemsPerPage, $page, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerGetRequestsWithHttpInfo.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetRequests'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerGetRequestsWithHttpInfo($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['siteControllerGetRequests'][0])
    {
        $request = $this->siteControllerGetRequestsRequest($itemsPerPage, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerGetRequestsAsync.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerGetRequestsAsync($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['siteControllerGetRequests'][0])
    {
        return $this->siteControllerGetRequestsAsyncWithHttpInfo($itemsPerPage, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerGetRequestsAsyncWithHttpInfo.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerGetRequestsAsyncWithHttpInfo($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['siteControllerGetRequests'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRequestList';
        $request = $this->siteControllerGetRequestsRequest($itemsPerPage, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerGetRequests'.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerGetRequestsRequest($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['siteControllerGetRequests'][0])
    {
        $resourcePath = '/sync-core/site/requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerGetThrottling.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetThrottling'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto
     */
    public function siteControllerGetThrottling(string $contentType = self::contentTypes['siteControllerGetThrottling'][0])
    {
        list($response) = $this->siteControllerGetThrottlingWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation siteControllerGetThrottlingWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetThrottling'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerGetThrottlingWithHttpInfo(string $contentType = self::contentTypes['siteControllerGetThrottling'][0])
    {
        $request = $this->siteControllerGetThrottlingRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerGetThrottlingAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetThrottling'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerGetThrottlingAsync(string $contentType = self::contentTypes['siteControllerGetThrottling'][0])
    {
        return $this->siteControllerGetThrottlingAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerGetThrottlingAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetThrottling'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerGetThrottlingAsyncWithHttpInfo(string $contentType = self::contentTypes['siteControllerGetThrottling'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto';
        $request = $this->siteControllerGetThrottlingRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerGetThrottling'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerGetThrottling'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerGetThrottlingRequest(string $contentType = self::contentTypes['siteControllerGetThrottling'][0])
    {
        $resourcePath = '/sync-core/site/throttling';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerItem($id, string $contentType = self::contentTypes['siteControllerItem'][0])
    {
        list($response) = $this->siteControllerItemWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerItemWithHttpInfo($id, string $contentType = self::contentTypes['siteControllerItem'][0])
    {
        $request = $this->siteControllerItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemAsync($id, string $contentType = self::contentTypes['siteControllerItem'][0])
    {
        return $this->siteControllerItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['siteControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerItemRequest($id, string $contentType = self::contentTypes['siteControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling siteControllerItem'
            );
        }

        $resourcePath = '/sync-core/site/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerItemByUuid.
     *
     * @param  string $uuid uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerItemByUuid($uuid, string $contentType = self::contentTypes['siteControllerItemByUuid'][0])
    {
        list($response) = $this->siteControllerItemByUuidWithHttpInfo($uuid, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerItemByUuidWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerItemByUuidWithHttpInfo($uuid, string $contentType = self::contentTypes['siteControllerItemByUuid'][0])
    {
        $request = $this->siteControllerItemByUuidRequest($uuid, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerItemByUuidAsync.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemByUuidAsync($uuid, string $contentType = self::contentTypes['siteControllerItemByUuid'][0])
    {
        return $this->siteControllerItemByUuidAsyncWithHttpInfo($uuid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemByUuidAsyncWithHttpInfo($uuid, string $contentType = self::contentTypes['siteControllerItemByUuid'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerItemByUuidRequest($uuid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerItemByUuid'.
     *
     * @param  string $uuid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerItemByUuid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerItemByUuidRequest($uuid, string $contentType = self::contentTypes['siteControllerItemByUuid'][0])
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling siteControllerItemByUuid'
            );
        }

        $resourcePath = '/sync-core/site/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerRegister.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto registerSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegister'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerRegister($registerSiteDto, string $contentType = self::contentTypes['siteControllerRegister'][0])
    {
        list($response) = $this->siteControllerRegisterWithHttpInfo($registerSiteDto, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerRegisterWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegister'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerRegisterWithHttpInfo($registerSiteDto, string $contentType = self::contentTypes['siteControllerRegister'][0])
    {
        $request = $this->siteControllerRegisterRequest($registerSiteDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerRegisterAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRegisterAsync($registerSiteDto, string $contentType = self::contentTypes['siteControllerRegister'][0])
    {
        return $this->siteControllerRegisterAsyncWithHttpInfo($registerSiteDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerRegisterAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRegisterAsyncWithHttpInfo($registerSiteDto, string $contentType = self::contentTypes['siteControllerRegister'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerRegisterRequest($registerSiteDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerRegister'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerRegisterRequest($registerSiteDto, string $contentType = self::contentTypes['siteControllerRegister'][0])
    {
        // verify the required parameter 'registerSiteDto' is set
        if (null === $registerSiteDto || (is_array($registerSiteDto) && 0 === count($registerSiteDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $registerSiteDto when calling siteControllerRegister'
            );
        }

        $resourcePath = '/sync-core/site';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($registerSiteDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($registerSiteDto));
            } else {
                $httpBody = $registerSiteDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerRegisterNew.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterNewSiteDto $registerNewSiteDto registerNewSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegisterNew'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerRegisterNew($registerNewSiteDto, string $contentType = self::contentTypes['siteControllerRegisterNew'][0])
    {
        list($response) = $this->siteControllerRegisterNewWithHttpInfo($registerNewSiteDto, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerRegisterNewWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterNewSiteDto $registerNewSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegisterNew'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerRegisterNewWithHttpInfo($registerNewSiteDto, string $contentType = self::contentTypes['siteControllerRegisterNew'][0])
    {
        $request = $this->siteControllerRegisterNewRequest($registerNewSiteDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerRegisterNewAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterNewSiteDto $registerNewSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegisterNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRegisterNewAsync($registerNewSiteDto, string $contentType = self::contentTypes['siteControllerRegisterNew'][0])
    {
        return $this->siteControllerRegisterNewAsyncWithHttpInfo($registerNewSiteDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerRegisterNewAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterNewSiteDto $registerNewSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegisterNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRegisterNewAsyncWithHttpInfo($registerNewSiteDto, string $contentType = self::contentTypes['siteControllerRegisterNew'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerRegisterNewRequest($registerNewSiteDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerRegisterNew'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RegisterNewSiteDto $registerNewSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRegisterNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerRegisterNewRequest($registerNewSiteDto, string $contentType = self::contentTypes['siteControllerRegisterNew'][0])
    {
        // verify the required parameter 'registerNewSiteDto' is set
        if (null === $registerNewSiteDto || (is_array($registerNewSiteDto) && 0 === count($registerNewSiteDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $registerNewSiteDto when calling siteControllerRegisterNew'
            );
        }

        $resourcePath = '/sync-core/site/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($registerNewSiteDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($registerNewSiteDto));
            } else {
                $httpBody = $registerNewSiteDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerRespondToRequest.
     *
     * @param  string $id id (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RequestResponseDto $requestResponseDto requestResponseDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRespondToRequest'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function siteControllerRespondToRequest($id, $requestResponseDto, string $contentType = self::contentTypes['siteControllerRespondToRequest'][0])
    {
        list($response) = $this->siteControllerRespondToRequestWithHttpInfo($id, $requestResponseDto, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerRespondToRequestWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RequestResponseDto $requestResponseDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRespondToRequest'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerRespondToRequestWithHttpInfo($id, $requestResponseDto, string $contentType = self::contentTypes['siteControllerRespondToRequest'][0])
    {
        $request = $this->siteControllerRespondToRequestRequest($id, $requestResponseDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerRespondToRequestAsync.
     *
     * @param  string $id (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RequestResponseDto $requestResponseDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRespondToRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRespondToRequestAsync($id, $requestResponseDto, string $contentType = self::contentTypes['siteControllerRespondToRequest'][0])
    {
        return $this->siteControllerRespondToRequestAsyncWithHttpInfo($id, $requestResponseDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerRespondToRequestAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RequestResponseDto $requestResponseDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRespondToRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRespondToRequestAsyncWithHttpInfo($id, $requestResponseDto, string $contentType = self::contentTypes['siteControllerRespondToRequest'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->siteControllerRespondToRequestRequest($id, $requestResponseDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerRespondToRequest'.
     *
     * @param  string $id (required)
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\RequestResponseDto $requestResponseDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerRespondToRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerRespondToRequestRequest($id, $requestResponseDto, string $contentType = self::contentTypes['siteControllerRespondToRequest'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling siteControllerRespondToRequest'
            );
        }

        // verify the required parameter 'requestResponseDto' is set
        if (null === $requestResponseDto || (is_array($requestResponseDto) && 0 === count($requestResponseDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestResponseDto when calling siteControllerRespondToRequest'
            );
        }

        $resourcePath = '/sync-core/site/requests/{id}/respond';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestResponseDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($requestResponseDto));
            } else {
                $httpBody = $requestResponseDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerSearch.
     *
     * @param  string $baseUrl baseUrl (optional)
     * @param  string $page page (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $search search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSearch'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList
     */
    public function siteControllerSearch($baseUrl = null, $page = null, $itemsPerPage = null, $search = null, string $contentType = self::contentTypes['siteControllerSearch'][0])
    {
        list($response) = $this->siteControllerSearchWithHttpInfo($baseUrl, $page, $itemsPerPage, $search, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerSearchWithHttpInfo.
     *
     * @param  string $baseUrl (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSearch'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerSearchWithHttpInfo($baseUrl = null, $page = null, $itemsPerPage = null, $search = null, string $contentType = self::contentTypes['siteControllerSearch'][0])
    {
        $request = $this->siteControllerSearchRequest($baseUrl, $page, $itemsPerPage, $search, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerSearchAsync.
     *
     * @param  string $baseUrl (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerSearchAsync($baseUrl = null, $page = null, $itemsPerPage = null, $search = null, string $contentType = self::contentTypes['siteControllerSearch'][0])
    {
        return $this->siteControllerSearchAsyncWithHttpInfo($baseUrl, $page, $itemsPerPage, $search, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerSearchAsyncWithHttpInfo.
     *
     * @param  string $baseUrl (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerSearchAsyncWithHttpInfo($baseUrl = null, $page = null, $itemsPerPage = null, $search = null, string $contentType = self::contentTypes['siteControllerSearch'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList';
        $request = $this->siteControllerSearchRequest($baseUrl, $page, $itemsPerPage, $search, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerSearch'.
     *
     * @param  string $baseUrl (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $search (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerSearchRequest($baseUrl = null, $page = null, $itemsPerPage = null, $search = null, string $contentType = self::contentTypes['siteControllerSearch'][0])
    {
        $resourcePath = '/sync-core/site';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $baseUrl,
            'baseUrl', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerSetThrottling.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetThrottlingDto $setThrottlingDto setThrottlingDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSetThrottling'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto
     */
    public function siteControllerSetThrottling($setThrottlingDto, string $contentType = self::contentTypes['siteControllerSetThrottling'][0])
    {
        list($response) = $this->siteControllerSetThrottlingWithHttpInfo($setThrottlingDto, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerSetThrottlingWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetThrottlingDto $setThrottlingDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSetThrottling'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerSetThrottlingWithHttpInfo($setThrottlingDto, string $contentType = self::contentTypes['siteControllerSetThrottling'][0])
    {
        $request = $this->siteControllerSetThrottlingRequest($setThrottlingDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerSetThrottlingAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetThrottlingDto $setThrottlingDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSetThrottling'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerSetThrottlingAsync($setThrottlingDto, string $contentType = self::contentTypes['siteControllerSetThrottling'][0])
    {
        return $this->siteControllerSetThrottlingAsyncWithHttpInfo($setThrottlingDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerSetThrottlingAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetThrottlingDto $setThrottlingDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSetThrottling'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerSetThrottlingAsyncWithHttpInfo($setThrottlingDto, string $contentType = self::contentTypes['siteControllerSetThrottling'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\GetThrottlingDto';
        $request = $this->siteControllerSetThrottlingRequest($setThrottlingDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerSetThrottling'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SetThrottlingDto $setThrottlingDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerSetThrottling'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerSetThrottlingRequest($setThrottlingDto, string $contentType = self::contentTypes['siteControllerSetThrottling'][0])
    {
        // verify the required parameter 'setThrottlingDto' is set
        if (null === $setThrottlingDto || (is_array($setThrottlingDto) && 0 === count($setThrottlingDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setThrottlingDto when calling siteControllerSetThrottling'
            );
        }

        $resourcePath = '/sync-core/site/throttling';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($setThrottlingDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($setThrottlingDto));
            } else {
                $httpBody = $setThrottlingDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerUpdate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto createSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerUpdate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerUpdate($createSiteDto, string $contentType = self::contentTypes['siteControllerUpdate'][0])
    {
        list($response) = $this->siteControllerUpdateWithHttpInfo($createSiteDto, $contentType);

        return $response;
    }

    /**
     * Operation siteControllerUpdateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerUpdate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerUpdateWithHttpInfo($createSiteDto, string $contentType = self::contentTypes['siteControllerUpdate'][0])
    {
        $request = $this->siteControllerUpdateRequest($createSiteDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerUpdateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerUpdateAsync($createSiteDto, string $contentType = self::contentTypes['siteControllerUpdate'][0])
    {
        return $this->siteControllerUpdateAsyncWithHttpInfo($createSiteDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerUpdateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerUpdateAsyncWithHttpInfo($createSiteDto, string $contentType = self::contentTypes['siteControllerUpdate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerUpdateRequest($createSiteDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerUpdate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['siteControllerUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerUpdateRequest($createSiteDto, string $contentType = self::contentTypes['siteControllerUpdate'][0])
    {
        // verify the required parameter 'createSiteDto' is set
        if (null === $createSiteDto || (is_array($createSiteDto) && 0 === count($createSiteDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createSiteDto when calling siteControllerUpdate'
            );
        }

        $resourcePath = '/sync-core/site';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createSiteDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createSiteDto));
            } else {
                $httpBody = $createSiteDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'PATCH',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerCreate.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto createSyndicationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity
     */
    public function syndicationControllerCreate($createSyndicationDto, string $contentType = self::contentTypes['syndicationControllerCreate'][0])
    {
        list($response) = $this->syndicationControllerCreateWithHttpInfo($createSyndicationDto, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerCreateWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerCreate'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerCreateWithHttpInfo($createSyndicationDto, string $contentType = self::contentTypes['syndicationControllerCreate'][0])
    {
        $request = $this->syndicationControllerCreateRequest($createSyndicationDto, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerCreateAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerCreateAsync($createSyndicationDto, string $contentType = self::contentTypes['syndicationControllerCreate'][0])
    {
        return $this->syndicationControllerCreateAsyncWithHttpInfo($createSyndicationDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerCreateAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerCreateAsyncWithHttpInfo($createSyndicationDto, string $contentType = self::contentTypes['syndicationControllerCreate'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity';
        $request = $this->syndicationControllerCreateRequest($createSyndicationDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerCreate'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerCreateRequest($createSyndicationDto, string $contentType = self::contentTypes['syndicationControllerCreate'][0])
    {
        // verify the required parameter 'createSyndicationDto' is set
        if (null === $createSyndicationDto || (is_array($createSyndicationDto) && 0 === count($createSyndicationDto))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createSyndicationDto when calling syndicationControllerCreate'
            );
        }

        $resourcePath = '/sync-core/syndication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createSyndicationDto)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($createSyndicationDto));
            } else {
                $httpBody = $createSyndicationDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerDelete.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SyndicationDeleteRequest $syndicationDeleteRequest syndicationDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[]
     */
    public function syndicationControllerDelete($syndicationDeleteRequest, string $contentType = self::contentTypes['syndicationControllerDelete'][0])
    {
        list($response) = $this->syndicationControllerDeleteWithHttpInfo($syndicationDeleteRequest, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerDeleteWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SyndicationDeleteRequest $syndicationDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerDelete'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerDeleteWithHttpInfo($syndicationDeleteRequest, string $contentType = self::contentTypes['syndicationControllerDelete'][0])
    {
        $request = $this->syndicationControllerDeleteRequest($syndicationDeleteRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerDeleteAsync.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SyndicationDeleteRequest $syndicationDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerDeleteAsync($syndicationDeleteRequest, string $contentType = self::contentTypes['syndicationControllerDelete'][0])
    {
        return $this->syndicationControllerDeleteAsyncWithHttpInfo($syndicationDeleteRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerDeleteAsyncWithHttpInfo.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SyndicationDeleteRequest $syndicationDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerDeleteAsyncWithHttpInfo($syndicationDeleteRequest, string $contentType = self::contentTypes['syndicationControllerDelete'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity[]';
        $request = $this->syndicationControllerDeleteRequest($syndicationDeleteRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerDelete'.
     *
     * @param  \EdgeBox\SyncCore\V2\Raw\Model\SyndicationDeleteRequest $syndicationDeleteRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerDeleteRequest($syndicationDeleteRequest, string $contentType = self::contentTypes['syndicationControllerDelete'][0])
    {
        // verify the required parameter 'syndicationDeleteRequest' is set
        if (null === $syndicationDeleteRequest || (is_array($syndicationDeleteRequest) && 0 === count($syndicationDeleteRequest))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $syndicationDeleteRequest when calling syndicationControllerDelete'
            );
        }

        $resourcePath = '/sync-core/syndication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($syndicationDeleteRequest)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($syndicationDeleteRequest));
            } else {
                $httpBody = $syndicationDeleteRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'DELETE',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerGetErrors.
     *
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $page page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerGetErrors'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList
     */
    public function syndicationControllerGetErrors($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['syndicationControllerGetErrors'][0])
    {
        list($response) = $this->syndicationControllerGetErrorsWithHttpInfo($itemsPerPage, $page, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerGetErrorsWithHttpInfo.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerGetErrors'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerGetErrorsWithHttpInfo($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['syndicationControllerGetErrors'][0])
    {
        $request = $this->syndicationControllerGetErrorsRequest($itemsPerPage, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerGetErrorsAsync.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerGetErrors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerGetErrorsAsync($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['syndicationControllerGetErrors'][0])
    {
        return $this->syndicationControllerGetErrorsAsyncWithHttpInfo($itemsPerPage, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerGetErrorsAsyncWithHttpInfo.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerGetErrors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerGetErrorsAsyncWithHttpInfo($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['syndicationControllerGetErrors'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList';
        $request = $this->syndicationControllerGetErrorsRequest($itemsPerPage, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerGetErrors'.
     *
     * @param  string $itemsPerPage (optional)
     * @param  string $page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerGetErrors'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerGetErrorsRequest($itemsPerPage = null, $page = null, string $contentType = self::contentTypes['syndicationControllerGetErrors'][0])
    {
        $resourcePath = '/sync-core/syndication/errors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerItem.
     *
     * @param  string $id id (required)
     * @param  string $includeUsage includeUsage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage
     */
    public function syndicationControllerItem($id, $includeUsage = null, string $contentType = self::contentTypes['syndicationControllerItem'][0])
    {
        list($response) = $this->syndicationControllerItemWithHttpInfo($id, $includeUsage, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerItemWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $includeUsage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerItem'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerItemWithHttpInfo($id, $includeUsage = null, string $contentType = self::contentTypes['syndicationControllerItem'][0])
    {
        $request = $this->syndicationControllerItemRequest($id, $includeUsage, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerItemAsync.
     *
     * @param  string $id (required)
     * @param  string $includeUsage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerItemAsync($id, $includeUsage = null, string $contentType = self::contentTypes['syndicationControllerItem'][0])
    {
        return $this->syndicationControllerItemAsyncWithHttpInfo($id, $includeUsage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerItemAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $includeUsage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerItemAsyncWithHttpInfo($id, $includeUsage = null, string $contentType = self::contentTypes['syndicationControllerItem'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage';
        $request = $this->syndicationControllerItemRequest($id, $includeUsage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerItem'.
     *
     * @param  string $id (required)
     * @param  string $includeUsage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerItemRequest($id, $includeUsage = null, string $contentType = self::contentTypes['syndicationControllerItem'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling syndicationControllerItem'
            );
        }

        $resourcePath = '/sync-core/syndication/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeUsage,
            'includeUsage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerList.
     *
     * @param  string $statuses statuses (optional)
     * @param  string $migrationId migrationId (optional)
     * @param  string $includeUsage includeUsage (optional)
     * @param  string $sourceSyndicationId sourceSyndicationId (optional)
     * @param  string $flowMachineNames flowMachineNames (optional)
     * @param  string $flowIds flowIds (optional)
     * @param  string $poolMachineNames poolMachineNames (optional)
     * @param  string $poolIds poolIds (optional)
     * @param  string $siteUuids siteUuids (optional)
     * @param  string $siteIds siteIds (optional)
     * @param  string $entityRemoteUniqueIds entityRemoteUniqueIds (optional)
     * @param  string $entityRemoteUuids entityRemoteUuids (optional)
     * @param  string $entityIds entityIds (optional)
     * @param  string $groupBy groupBy (optional)
     * @param  string $page page (optional)
     * @param  string $itemsPerPage itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList
     */
    public function syndicationControllerList($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['syndicationControllerList'][0])
    {
        list($response) = $this->syndicationControllerListWithHttpInfo($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $page, $itemsPerPage, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerListWithHttpInfo.
     *
     * @param  string $statuses (optional)
     * @param  string $migrationId (optional)
     * @param  string $includeUsage (optional)
     * @param  string $sourceSyndicationId (optional)
     * @param  string $flowMachineNames (optional)
     * @param  string $flowIds (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $poolIds (optional)
     * @param  string $siteUuids (optional)
     * @param  string $siteIds (optional)
     * @param  string $entityRemoteUniqueIds (optional)
     * @param  string $entityRemoteUuids (optional)
     * @param  string $entityIds (optional)
     * @param  string $groupBy (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerList'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerListWithHttpInfo($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['syndicationControllerList'][0])
    {
        $request = $this->syndicationControllerListRequest($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $page, $itemsPerPage, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerListAsync.
     *
     * @param  string $statuses (optional)
     * @param  string $migrationId (optional)
     * @param  string $includeUsage (optional)
     * @param  string $sourceSyndicationId (optional)
     * @param  string $flowMachineNames (optional)
     * @param  string $flowIds (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $poolIds (optional)
     * @param  string $siteUuids (optional)
     * @param  string $siteIds (optional)
     * @param  string $entityRemoteUniqueIds (optional)
     * @param  string $entityRemoteUuids (optional)
     * @param  string $entityIds (optional)
     * @param  string $groupBy (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerListAsync($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['syndicationControllerList'][0])
    {
        return $this->syndicationControllerListAsyncWithHttpInfo($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $page, $itemsPerPage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerListAsyncWithHttpInfo.
     *
     * @param  string $statuses (optional)
     * @param  string $migrationId (optional)
     * @param  string $includeUsage (optional)
     * @param  string $sourceSyndicationId (optional)
     * @param  string $flowMachineNames (optional)
     * @param  string $flowIds (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $poolIds (optional)
     * @param  string $siteUuids (optional)
     * @param  string $siteIds (optional)
     * @param  string $entityRemoteUniqueIds (optional)
     * @param  string $entityRemoteUuids (optional)
     * @param  string $entityIds (optional)
     * @param  string $groupBy (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerListAsyncWithHttpInfo($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['syndicationControllerList'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList';
        $request = $this->syndicationControllerListRequest($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $page, $itemsPerPage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerList'.
     *
     * @param  string $statuses (optional)
     * @param  string $migrationId (optional)
     * @param  string $includeUsage (optional)
     * @param  string $sourceSyndicationId (optional)
     * @param  string $flowMachineNames (optional)
     * @param  string $flowIds (optional)
     * @param  string $poolMachineNames (optional)
     * @param  string $poolIds (optional)
     * @param  string $siteUuids (optional)
     * @param  string $siteIds (optional)
     * @param  string $entityRemoteUniqueIds (optional)
     * @param  string $entityRemoteUuids (optional)
     * @param  string $entityIds (optional)
     * @param  string $groupBy (optional)
     * @param  string $page (optional)
     * @param  string $itemsPerPage (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerListRequest($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $page = null, $itemsPerPage = null, string $contentType = self::contentTypes['syndicationControllerList'][0])
    {
        $resourcePath = '/sync-core/syndication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $migrationId,
            'migrationId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includeUsage,
            'includeUsage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sourceSyndicationId,
            'sourceSyndicationId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $flowMachineNames,
            'flowMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $flowIds,
            'flowIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $poolMachineNames,
            'poolMachineNames', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $poolIds,
            'poolIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $siteUuids,
            'siteUuids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $siteIds,
            'siteIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityRemoteUniqueIds,
            'entityRemoteUniqueIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityRemoteUuids,
            'entityRemoteUuids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityIds,
            'entityIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groupBy,
            'groupBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $itemsPerPage,
            'itemsPerPage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerRestart.
     *
     * @param  string $id id (required)
     * @param  object $body body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerRestart'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity
     */
    public function syndicationControllerRestart($id, $body, string $contentType = self::contentTypes['syndicationControllerRestart'][0])
    {
        list($response) = $this->syndicationControllerRestartWithHttpInfo($id, $body, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerRestartWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerRestart'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerRestartWithHttpInfo($id, $body, string $contentType = self::contentTypes['syndicationControllerRestart'][0])
    {
        $request = $this->syndicationControllerRestartRequest($id, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerRestartAsync.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerRestart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerRestartAsync($id, $body, string $contentType = self::contentTypes['syndicationControllerRestart'][0])
    {
        return $this->syndicationControllerRestartAsyncWithHttpInfo($id, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerRestartAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerRestart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerRestartAsyncWithHttpInfo($id, $body, string $contentType = self::contentTypes['syndicationControllerRestart'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity';
        $request = $this->syndicationControllerRestartRequest($id, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerRestart'.
     *
     * @param  string $id (required)
     * @param  object $body (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerRestart'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerRestartRequest($id, $body, string $contentType = self::contentTypes['syndicationControllerRestart'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling syndicationControllerRestart'
            );
        }

        // verify the required parameter 'body' is set
        if (null === $body || (is_array($body) && 0 === count($body))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling syndicationControllerRestart'
            );
        }

        $resourcePath = '/sync-core/syndication/{id}/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the body
                $httpBody = ObjectSerializer::guzzleJsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'POST',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerUsageSummary.
     *
     * @param  string $id id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary
     */
    public function syndicationControllerUsageSummary($id, string $contentType = self::contentTypes['syndicationControllerUsageSummary'][0])
    {
        list($response) = $this->syndicationControllerUsageSummaryWithHttpInfo($id, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerUsageSummaryWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerUsageSummaryWithHttpInfo($id, string $contentType = self::contentTypes['syndicationControllerUsageSummary'][0])
    {
        $request = $this->syndicationControllerUsageSummaryRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerUsageSummaryAsync.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryAsync($id, string $contentType = self::contentTypes['syndicationControllerUsageSummary'][0])
    {
        return $this->syndicationControllerUsageSummaryAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerUsageSummaryAsyncWithHttpInfo.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryAsyncWithHttpInfo($id, string $contentType = self::contentTypes['syndicationControllerUsageSummary'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary';
        $request = $this->syndicationControllerUsageSummaryRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerUsageSummary'.
     *
     * @param  string $id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerUsageSummaryRequest($id, string $contentType = self::contentTypes['syndicationControllerUsageSummary'][0])
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling syndicationControllerUsageSummary'
            );
        }

        $resourcePath = '/sync-core/syndication/usage-summary/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerUsageSummaryForSite.
     *
     * @param  string $siteUuid siteUuid (required)
     * @param  string $remoteUuid remoteUuid (optional)
     * @param  string $remoteUniqueId remoteUniqueId (optional)
     * @param  string $namespaceMachineName namespaceMachineName (optional)
     * @param  string $machineName machineName (optional)
     * @param  string $includingMigrations includingMigrations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummaryForSite'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse
     */
    public function syndicationControllerUsageSummaryForSite($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $namespaceMachineName = null, $machineName = null, $includingMigrations = null, string $contentType = self::contentTypes['syndicationControllerUsageSummaryForSite'][0])
    {
        list($response) = $this->syndicationControllerUsageSummaryForSiteWithHttpInfo($siteUuid, $remoteUuid, $remoteUniqueId, $namespaceMachineName, $machineName, $includingMigrations, $contentType);

        return $response;
    }

    /**
     * Operation syndicationControllerUsageSummaryForSiteWithHttpInfo.
     *
     * @param  string $siteUuid (required)
     * @param  string $remoteUuid (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $namespaceMachineName (optional)
     * @param  string $machineName (optional)
     * @param  string $includingMigrations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummaryForSite'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerUsageSummaryForSiteWithHttpInfo($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $namespaceMachineName = null, $machineName = null, $includingMigrations = null, string $contentType = self::contentTypes['syndicationControllerUsageSummaryForSite'][0])
    {
        $request = $this->syndicationControllerUsageSummaryForSiteRequest($siteUuid, $remoteUuid, $remoteUniqueId, $namespaceMachineName, $machineName, $includingMigrations, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerUsageSummaryForSiteAsync.
     *
     * @param  string $siteUuid (required)
     * @param  string $remoteUuid (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $namespaceMachineName (optional)
     * @param  string $machineName (optional)
     * @param  string $includingMigrations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummaryForSite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryForSiteAsync($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $namespaceMachineName = null, $machineName = null, $includingMigrations = null, string $contentType = self::contentTypes['syndicationControllerUsageSummaryForSite'][0])
    {
        return $this->syndicationControllerUsageSummaryForSiteAsyncWithHttpInfo($siteUuid, $remoteUuid, $remoteUniqueId, $namespaceMachineName, $machineName, $includingMigrations, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerUsageSummaryForSiteAsyncWithHttpInfo.
     *
     * @param  string $siteUuid (required)
     * @param  string $remoteUuid (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $namespaceMachineName (optional)
     * @param  string $machineName (optional)
     * @param  string $includingMigrations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummaryForSite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryForSiteAsyncWithHttpInfo($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $namespaceMachineName = null, $machineName = null, $includingMigrations = null, string $contentType = self::contentTypes['syndicationControllerUsageSummaryForSite'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse';
        $request = $this->syndicationControllerUsageSummaryForSiteRequest($siteUuid, $remoteUuid, $remoteUniqueId, $namespaceMachineName, $machineName, $includingMigrations, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerUsageSummaryForSite'.
     *
     * @param  string $siteUuid (required)
     * @param  string $remoteUuid (optional)
     * @param  string $remoteUniqueId (optional)
     * @param  string $namespaceMachineName (optional)
     * @param  string $machineName (optional)
     * @param  string $includingMigrations (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['syndicationControllerUsageSummaryForSite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerUsageSummaryForSiteRequest($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $namespaceMachineName = null, $machineName = null, $includingMigrations = null, string $contentType = self::contentTypes['syndicationControllerUsageSummaryForSite'][0])
    {
        // verify the required parameter 'siteUuid' is set
        if (null === $siteUuid || (is_array($siteUuid) && 0 === count($siteUuid))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $siteUuid when calling syndicationControllerUsageSummaryForSite'
            );
        }

        $resourcePath = '/sync-core/syndication/usage-summary-for-site/{siteUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $remoteUuid,
            'remoteUuid', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $remoteUniqueId,
            'remoteUniqueId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $namespaceMachineName,
            'namespaceMachineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $machineName,
            'machineName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $includingMigrations,
            'includingMigrations', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // path params
        if (null !== $siteUuid) {
            $resourcePath = str_replace(
                '{'.'siteUuid'.'}',
                ObjectSerializer::toPathValue($siteUuid),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usageStatsControllerGetForPeriod.
     *
     * @param  string $period period (required)
     * @param  UsageStatsType $type type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForPeriod'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\UsageStats
     */
    public function usageStatsControllerGetForPeriod($period, $type, string $contentType = self::contentTypes['usageStatsControllerGetForPeriod'][0])
    {
        list($response) = $this->usageStatsControllerGetForPeriodWithHttpInfo($period, $type, $contentType);

        return $response;
    }

    /**
     * Operation usageStatsControllerGetForPeriodWithHttpInfo.
     *
     * @param  string $period (required)
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForPeriod'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\UsageStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageStatsControllerGetForPeriodWithHttpInfo($period, $type, string $contentType = self::contentTypes['usageStatsControllerGetForPeriod'][0])
    {
        $request = $this->usageStatsControllerGetForPeriodRequest($period, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageStats' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageStats' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usageStatsControllerGetForPeriodAsync.
     *
     * @param  string $period (required)
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForPeriodAsync($period, $type, string $contentType = self::contentTypes['usageStatsControllerGetForPeriod'][0])
    {
        return $this->usageStatsControllerGetForPeriodAsyncWithHttpInfo($period, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation usageStatsControllerGetForPeriodAsyncWithHttpInfo.
     *
     * @param  string $period (required)
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForPeriodAsyncWithHttpInfo($period, $type, string $contentType = self::contentTypes['usageStatsControllerGetForPeriod'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
        $request = $this->usageStatsControllerGetForPeriodRequest($period, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'usageStatsControllerGetForPeriod'.
     *
     * @param  string $period (required)
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForPeriod'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usageStatsControllerGetForPeriodRequest($period, $type, string $contentType = self::contentTypes['usageStatsControllerGetForPeriod'][0])
    {
        // verify the required parameter 'period' is set
        if (null === $period || (is_array($period) && 0 === count($period))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period when calling usageStatsControllerGetForPeriod'
            );
        }

        // verify the required parameter 'type' is set
        if (null === $type || (is_array($type) && 0 === count($type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling usageStatsControllerGetForPeriod'
            );
        }

        $resourcePath = '/sync-core/usage-stats/for-period/{type}/{period}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $period) {
            $resourcePath = str_replace(
                '{'.'period'.'}',
                ObjectSerializer::toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if (null !== $type) {
            $resourcePath = str_replace(
                '{'.'type'.'}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usageStatsControllerGetForType.
     *
     * @param  UsageStatsType $type type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForType'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\UsageStats
     */
    public function usageStatsControllerGetForType($type, string $contentType = self::contentTypes['usageStatsControllerGetForType'][0])
    {
        list($response) = $this->usageStatsControllerGetForTypeWithHttpInfo($type, $contentType);

        return $response;
    }

    /**
     * Operation usageStatsControllerGetForTypeWithHttpInfo.
     *
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForType'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\UsageStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageStatsControllerGetForTypeWithHttpInfo($type, string $contentType = self::contentTypes['usageStatsControllerGetForType'][0])
    {
        $request = $this->usageStatsControllerGetForTypeRequest($type, $contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageStats' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageStats' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usageStatsControllerGetForTypeAsync.
     *
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForTypeAsync($type, string $contentType = self::contentTypes['usageStatsControllerGetForType'][0])
    {
        return $this->usageStatsControllerGetForTypeAsyncWithHttpInfo($type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation usageStatsControllerGetForTypeAsyncWithHttpInfo.
     *
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForTypeAsyncWithHttpInfo($type, string $contentType = self::contentTypes['usageStatsControllerGetForType'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
        $request = $this->usageStatsControllerGetForTypeRequest($type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'usageStatsControllerGetForType'.
     *
     * @param  UsageStatsType $type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerGetForType'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usageStatsControllerGetForTypeRequest($type, string $contentType = self::contentTypes['usageStatsControllerGetForType'][0])
    {
        // verify the required parameter 'type' is set
        if (null === $type || (is_array($type) && 0 === count($type))) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling usageStatsControllerGetForType'
            );
        }

        $resourcePath = '/sync-core/usage-stats/for-period/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $type) {
            $resourcePath = str_replace(
                '{'.'type'.'}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usageStatsControllerSummary.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\UsageSummary
     */
    public function usageStatsControllerSummary(string $contentType = self::contentTypes['usageStatsControllerSummary'][0])
    {
        list($response) = $this->usageStatsControllerSummaryWithHttpInfo($contentType);

        return $response;
    }

    /**
     * Operation usageStatsControllerSummaryWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerSummary'] to see the possible values for this operation
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\UsageSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageStatsControllerSummaryWithHttpInfo(string $contentType = self::contentTypes['usageStatsControllerSummary'][0])
    {
        $request = $this->usageStatsControllerSummaryRequest($contentType);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ('string' !== $returnType) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usageStatsControllerSummaryAsync.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerSummaryAsync(string $contentType = self::contentTypes['usageStatsControllerSummary'][0])
    {
        return $this->usageStatsControllerSummaryAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation usageStatsControllerSummaryAsyncWithHttpInfo.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerSummaryAsyncWithHttpInfo(string $contentType = self::contentTypes['usageStatsControllerSummary'][0])
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary';
        $request = $this->usageStatsControllerSummaryRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== $returnType) {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            )
        ;
    }

    /**
     * Create request for operation 'usageStatsControllerSummary'.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usageStatsControllerSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usageStatsControllerSummaryRequest(string $contentType = self::contentTypes['usageStatsControllerSummary'][0])
    {
        $resourcePath = '/sync-core/usage-stats/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        $headers = $this->headerSelector->selectHeaders(
            ['application/json'],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif (false !== stripos($headers['Content-Type'], 'application/json')) {
                // if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = ObjectSerializer::guzzleJsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);

        return new Request(
            'GET',
            $operationHost.$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
