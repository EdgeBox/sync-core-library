<?php
/**
 * DefaultApi
 * PHP version 7.2.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Cloud Sync Core.
 *
 * The Sync Core.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EdgeBox\SyncCore\V2\Raw\Api;

use EdgeBox\SyncCore\V2\Raw\ApiException;
use EdgeBox\SyncCore\V2\Raw\Configuration;
use EdgeBox\SyncCore\V2\Raw\HeaderSelector;
use EdgeBox\SyncCore\V2\Raw\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * DefaultApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authenticationControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto createAuthenticationDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function authenticationControllerCreate($createAuthenticationDto)
    {
        list($response) = $this->authenticationControllerCreateWithHttpInfo($createAuthenticationDto);

        return $response;
    }

    /**
     * Operation authenticationControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authenticationControllerCreateWithHttpInfo($createAuthenticationDto)
    {
        $request = $this->authenticationControllerCreateRequest($createAuthenticationDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation authenticationControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerCreateAsync($createAuthenticationDto)
    {
        return $this->authenticationControllerCreateAsyncWithHttpInfo($createAuthenticationDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation authenticationControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticationControllerCreateAsyncWithHttpInfo($createAuthenticationDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->authenticationControllerCreateRequest($createAuthenticationDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'authenticationControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateAuthenticationDto $createAuthenticationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function authenticationControllerCreateRequest($createAuthenticationDto)
    {
        // verify the required parameter 'createAuthenticationDto' is set
        if (null === $createAuthenticationDto || (is_array($createAuthenticationDto) && 0 === count($createAuthenticationDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createAuthenticationDto when calling authenticationControllerCreate');
        }

        $resourcePath = '/sync-core/authentication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createAuthenticationDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createAuthenticationDto));
            } else {
                $httpBody = $createAuthenticationDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation configurationControllerPullDashboard.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration
     */
    public function configurationControllerPullDashboard()
    {
        list($response) = $this->configurationControllerPullDashboardWithHttpInfo();

        return $response;
    }

    /**
     * Operation configurationControllerPullDashboardWithHttpInfo.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationControllerPullDashboardWithHttpInfo()
    {
        $request = $this->configurationControllerPullDashboardRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationControllerPullDashboardAsync.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerPullDashboardAsync()
    {
        return $this->configurationControllerPullDashboardAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation configurationControllerPullDashboardAsyncWithHttpInfo.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function configurationControllerPullDashboardAsyncWithHttpInfo()
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PullDashboardConfiguration';
        $request = $this->configurationControllerPullDashboardRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'configurationControllerPullDashboard'.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function configurationControllerPullDashboardRequest()
    {
        $resourcePath = '/sync-core/configuration/pull-dashboard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity
     */
    public function contractControllerItem($id)
    {
        list($response) = $this->contractControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation contractControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractControllerItemWithHttpInfo($id)
    {
        $request = $this->contractControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemAsync($id)
    {
        return $this->contractControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
        $request = $this->contractControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contractControllerItem');
        }

        $resourcePath = '/sync-core/contract/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractControllerItemByUuid.
     *
     * @param string $uuid uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity
     */
    public function contractControllerItemByUuid($uuid)
    {
        list($response) = $this->contractControllerItemByUuidWithHttpInfo($uuid);

        return $response;
    }

    /**
     * Operation contractControllerItemByUuidWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ContractEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractControllerItemByUuidWithHttpInfo($uuid)
    {
        $request = $this->contractControllerItemByUuidRequest($uuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractControllerItemByUuidAsync.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemByUuidAsync($uuid)
    {
        return $this->contractControllerItemByUuidAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractControllerItemByUuidAsyncWithHttpInfo($uuid)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractEntity';
        $request = $this->contractControllerItemByUuidRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractControllerItemByUuid'.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractControllerItemByUuidRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException('Missing the required parameter $uuid when calling contractControllerItemByUuid');
        }

        $resourcePath = '/sync-core/contract/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractRevisionControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity
     */
    public function contractRevisionControllerItem($id)
    {
        list($response) = $this->contractRevisionControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation contractRevisionControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractRevisionControllerItemWithHttpInfo($id)
    {
        $request = $this->contractRevisionControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractRevisionControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerItemAsync($id)
    {
        return $this->contractRevisionControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractRevisionControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionEntity';
        $request = $this->contractRevisionControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractRevisionControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractRevisionControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contractRevisionControllerItem');
        }

        $resourcePath = '/sync-core/contract-revision/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation contractRevisionControllerMostRecentForContract.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions
     */
    public function contractRevisionControllerMostRecentForContract($id)
    {
        list($response) = $this->contractRevisionControllerMostRecentForContractWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation contractRevisionControllerMostRecentForContractWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions, HTTP status code, HTTP response headers (array of strings)
     */
    public function contractRevisionControllerMostRecentForContractWithHttpInfo($id)
    {
        $request = $this->contractRevisionControllerMostRecentForContractRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation contractRevisionControllerMostRecentForContractAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerMostRecentForContractAsync($id)
    {
        return $this->contractRevisionControllerMostRecentForContractAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation contractRevisionControllerMostRecentForContractAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function contractRevisionControllerMostRecentForContractAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MostRecentContractRevisions';
        $request = $this->contractRevisionControllerMostRecentForContractRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'contractRevisionControllerMostRecentForContract'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function contractRevisionControllerMostRecentForContractRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling contractRevisionControllerMostRecentForContract');
        }

        $resourcePath = '/sync-core/contract-revision/most-recent-for-contract/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity
     */
    public function customerControllerItem($id)
    {
        list($response) = $this->customerControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation customerControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerControllerItemWithHttpInfo($id)
    {
        $request = $this->customerControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemAsync($id)
    {
        return $this->customerControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation customerControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
        $request = $this->customerControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'customerControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customerControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customerControllerItem');
        }

        $resourcePath = '/sync-core/customer/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerControllerItemByUuid.
     *
     * @param string $uuid uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity
     */
    public function customerControllerItemByUuid($uuid)
    {
        list($response) = $this->customerControllerItemByUuidWithHttpInfo($uuid);

        return $response;
    }

    /**
     * Operation customerControllerItemByUuidWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerControllerItemByUuidWithHttpInfo($uuid)
    {
        $request = $this->customerControllerItemByUuidRequest($uuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation customerControllerItemByUuidAsync.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemByUuidAsync($uuid)
    {
        return $this->customerControllerItemByUuidAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation customerControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerControllerItemByUuidAsyncWithHttpInfo($uuid)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\CustomerEntity';
        $request = $this->customerControllerItemByUuidRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'customerControllerItemByUuid'.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function customerControllerItemByUuidRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException('Missing the required parameter $uuid when calling customerControllerItemByUuid');
        }

        $resourcePath = '/sync-core/customer/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto createFileDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileEntity
     */
    public function fileControllerCreate($createFileDto)
    {
        list($response) = $this->fileControllerCreateWithHttpInfo($createFileDto);

        return $response;
    }

    /**
     * Operation fileControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FileEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerCreateWithHttpInfo($createFileDto)
    {
        $request = $this->fileControllerCreateRequest($createFileDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerCreateAsync($createFileDto)
    {
        return $this->fileControllerCreateAsyncWithHttpInfo($createFileDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerCreateAsyncWithHttpInfo($createFileDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
        $request = $this->fileControllerCreateRequest($createFileDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFileDto $createFileDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerCreateRequest($createFileDto)
    {
        // verify the required parameter 'createFileDto' is set
        if (null === $createFileDto || (is_array($createFileDto) && 0 === count($createFileDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createFileDto when calling fileControllerCreate');
        }

        $resourcePath = '/sync-core/file';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createFileDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createFileDto));
            } else {
                $httpBody = $createFileDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerDownload.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function fileControllerDownload($id)
    {
        list($response) = $this->fileControllerDownloadWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation fileControllerDownloadWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerDownloadWithHttpInfo($id)
    {
        $request = $this->fileControllerDownloadRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerDownloadAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerDownloadAsync($id)
    {
        return $this->fileControllerDownloadAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerDownloadAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerDownloadAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->fileControllerDownloadRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerDownload'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerDownloadRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling fileControllerDownload');
        }

        $resourcePath = '/sync-core/file/{id}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerFileUploaded.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileEntity
     */
    public function fileControllerFileUploaded($id)
    {
        list($response) = $this->fileControllerFileUploadedWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation fileControllerFileUploadedWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FileEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerFileUploadedWithHttpInfo($id)
    {
        $request = $this->fileControllerFileUploadedRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerFileUploadedAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerFileUploadedAsync($id)
    {
        return $this->fileControllerFileUploadedAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerFileUploadedAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerFileUploadedAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
        $request = $this->fileControllerFileUploadedRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerFileUploaded'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerFileUploadedRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling fileControllerFileUploaded');
        }

        $resourcePath = '/sync-core/file/{id}/uploaded';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fileControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileEntity
     */
    public function fileControllerItem($id)
    {
        list($response) = $this->fileControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation fileControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FileEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function fileControllerItemWithHttpInfo($id)
    {
        $request = $this->fileControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FileEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation fileControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerItemAsync($id)
    {
        return $this->fileControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation fileControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fileControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FileEntity';
        $request = $this->fileControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'fileControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fileControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling fileControllerItem');
        }

        $resourcePath = '/sync-core/file/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto createFlowDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity
     */
    public function flowControllerCreate($createFlowDto)
    {
        list($response) = $this->flowControllerCreateWithHttpInfo($createFlowDto);

        return $response;
    }

    /**
     * Operation flowControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerCreateWithHttpInfo($createFlowDto)
    {
        $request = $this->flowControllerCreateRequest($createFlowDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerCreateAsync($createFlowDto)
    {
        return $this->flowControllerCreateAsyncWithHttpInfo($createFlowDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerCreateAsyncWithHttpInfo($createFlowDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
        $request = $this->flowControllerCreateRequest($createFlowDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateFlowDto $createFlowDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerCreateRequest($createFlowDto)
    {
        // verify the required parameter 'createFlowDto' is set
        if (null === $createFlowDto || (is_array($createFlowDto) && 0 === count($createFlowDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createFlowDto when calling flowControllerCreate');
        }

        $resourcePath = '/sync-core/flow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createFlowDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createFlowDto));
            } else {
                $httpBody = $createFlowDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerDelete.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest flowDeleteRequest (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function flowControllerDelete($flowDeleteRequest)
    {
        list($response) = $this->flowControllerDeleteWithHttpInfo($flowDeleteRequest);

        return $response;
    }

    /**
     * Operation flowControllerDeleteWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerDeleteWithHttpInfo($flowDeleteRequest)
    {
        $request = $this->flowControllerDeleteRequest($flowDeleteRequest);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerDeleteAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerDeleteAsync($flowDeleteRequest)
    {
        return $this->flowControllerDeleteAsyncWithHttpInfo($flowDeleteRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerDeleteAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerDeleteAsyncWithHttpInfo($flowDeleteRequest)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->flowControllerDeleteRequest($flowDeleteRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerDelete'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\FlowDeleteRequest $flowDeleteRequest (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerDeleteRequest($flowDeleteRequest)
    {
        // verify the required parameter 'flowDeleteRequest' is set
        if (null === $flowDeleteRequest || (is_array($flowDeleteRequest) && 0 === count($flowDeleteRequest))) {
            throw new \InvalidArgumentException('Missing the required parameter $flowDeleteRequest when calling flowControllerDelete');
        }

        $resourcePath = '/sync-core/flow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($flowDeleteRequest)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($flowDeleteRequest));
            } else {
                $httpBody = $flowDeleteRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity
     */
    public function flowControllerItem($id)
    {
        list($response) = $this->flowControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation flowControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\FlowEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerItemWithHttpInfo($id)
    {
        $request = $this->flowControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerItemAsync($id)
    {
        return $this->flowControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\FlowEntity';
        $request = $this->flowControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling flowControllerItem');
        }

        $resourcePath = '/sync-core/flow/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation flowControllerList.
     *
     * @param string $poolMachineNames poolMachineNames (optional)
     * @param string $itemsPerPage     itemsPerPage (optional)
     * @param string $page             page (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList
     */
    public function flowControllerList($poolMachineNames = null, $itemsPerPage = null, $page = null)
    {
        list($response) = $this->flowControllerListWithHttpInfo($poolMachineNames, $itemsPerPage, $page);

        return $response;
    }

    /**
     * Operation flowControllerListWithHttpInfo.
     *
     * @param string $poolMachineNames (optional)
     * @param string $itemsPerPage     (optional)
     * @param string $page             (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList, HTTP status code, HTTP response headers (array of strings)
     */
    public function flowControllerListWithHttpInfo($poolMachineNames = null, $itemsPerPage = null, $page = null)
    {
        $request = $this->flowControllerListRequest($poolMachineNames, $itemsPerPage, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation flowControllerListAsync.
     *
     * @param string $poolMachineNames (optional)
     * @param string $itemsPerPage     (optional)
     * @param string $page             (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerListAsync($poolMachineNames = null, $itemsPerPage = null, $page = null)
    {
        return $this->flowControllerListAsyncWithHttpInfo($poolMachineNames, $itemsPerPage, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation flowControllerListAsyncWithHttpInfo.
     *
     * @param string $poolMachineNames (optional)
     * @param string $itemsPerPage     (optional)
     * @param string $page             (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function flowControllerListAsyncWithHttpInfo($poolMachineNames = null, $itemsPerPage = null, $page = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedFlowList';
        $request = $this->flowControllerListRequest($poolMachineNames, $itemsPerPage, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'flowControllerList'.
     *
     * @param string $poolMachineNames (optional)
     * @param string $itemsPerPage     (optional)
     * @param string $page             (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function flowControllerListRequest($poolMachineNames = null, $itemsPerPage = null, $page = null)
    {
        $resourcePath = '/sync-core/flow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $poolMachineNames) {
            if ('form' === 'form' && is_array($poolMachineNames)) {
                foreach ($poolMachineNames as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['poolMachineNames'] = $poolMachineNames;
            }
        }
        // query params
        if (null !== $itemsPerPage) {
            if ('form' === 'form' && is_array($itemsPerPage)) {
                foreach ($itemsPerPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['itemsPerPage'] = $itemsPerPage;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation healthControllerLive.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200|\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503
     */
    public function healthControllerLive()
    {
        list($response) = $this->healthControllerLiveWithHttpInfo();

        return $response;
    }

    /**
     * Operation healthControllerLiveWithHttpInfo.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200|\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503, HTTP status code, HTTP response headers (array of strings)
     */
    public function healthControllerLiveWithHttpInfo()
    {
        $request = $this->healthControllerLiveRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 503:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation healthControllerLiveAsync.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerLiveAsync()
    {
        return $this->healthControllerLiveAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation healthControllerLiveAsyncWithHttpInfo.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerLiveAsyncWithHttpInfo()
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200';
        $request = $this->healthControllerLiveRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'healthControllerLive'.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function healthControllerLiveRequest()
    {
        $resourcePath = '/sync-core/healthz/live';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation healthControllerReady.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200|\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503
     */
    public function healthControllerReady()
    {
        list($response) = $this->healthControllerReadyWithHttpInfo();

        return $response;
    }

    /**
     * Operation healthControllerReadyWithHttpInfo.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200|\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503, HTTP status code, HTTP response headers (array of strings)
     */
    public function healthControllerReadyWithHttpInfo()
    {
        $request = $this->healthControllerReadyRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];

                case 503:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;

                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse503',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation healthControllerReadyAsync.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerReadyAsync()
    {
        return $this->healthControllerReadyAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation healthControllerReadyAsyncWithHttpInfo.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function healthControllerReadyAsyncWithHttpInfo()
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\InlineResponse200';
        $request = $this->healthControllerReadyRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'healthControllerReady'.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function healthControllerReadyRequest()
    {
        $resourcePath = '/sync-core/healthz/ready';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localFileControllerDownload.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function localFileControllerDownload($id)
    {
        list($response) = $this->localFileControllerDownloadWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation localFileControllerDownloadWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localFileControllerDownloadWithHttpInfo($id)
    {
        $request = $this->localFileControllerDownloadRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation localFileControllerDownloadAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerDownloadAsync($id)
    {
        return $this->localFileControllerDownloadAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation localFileControllerDownloadAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerDownloadAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->localFileControllerDownloadRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'localFileControllerDownload'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localFileControllerDownloadRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling localFileControllerDownload');
        }

        $resourcePath = '/sync-core/file/local/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation localFileControllerUpload.
     *
     * @param string         $id   id (required)
     * @param \SplFileObject $file file (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function localFileControllerUpload($id, $file = null)
    {
        list($response) = $this->localFileControllerUploadWithHttpInfo($id, $file);

        return $response;
    }

    /**
     * Operation localFileControllerUploadWithHttpInfo.
     *
     * @param string         $id   (required)
     * @param \SplFileObject $file (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function localFileControllerUploadWithHttpInfo($id, $file = null)
    {
        $request = $this->localFileControllerUploadRequest($id, $file);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation localFileControllerUploadAsync.
     *
     * @param string         $id   (required)
     * @param \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerUploadAsync($id, $file = null)
    {
        return $this->localFileControllerUploadAsyncWithHttpInfo($id, $file)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation localFileControllerUploadAsyncWithHttpInfo.
     *
     * @param string         $id   (required)
     * @param \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function localFileControllerUploadAsyncWithHttpInfo($id, $file = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->localFileControllerUploadRequest($id, $file);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'localFileControllerUpload'.
     *
     * @param string         $id   (required)
     * @param \SplFileObject $file (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function localFileControllerUploadRequest($id, $file = null)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling localFileControllerUpload');
        }

        $resourcePath = '/sync-core/file/local/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if (null !== $file) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\try_fopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PUT',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto createMigrationDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity
     */
    public function migrationControllerCreate($createMigrationDto)
    {
        list($response) = $this->migrationControllerCreateWithHttpInfo($createMigrationDto);

        return $response;
    }

    /**
     * Operation migrationControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerCreateWithHttpInfo($createMigrationDto)
    {
        $request = $this->migrationControllerCreateRequest($createMigrationDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerCreateAsync($createMigrationDto)
    {
        return $this->migrationControllerCreateAsyncWithHttpInfo($createMigrationDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerCreateAsyncWithHttpInfo($createMigrationDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
        $request = $this->migrationControllerCreateRequest($createMigrationDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateMigrationDto $createMigrationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerCreateRequest($createMigrationDto)
    {
        // verify the required parameter 'createMigrationDto' is set
        if (null === $createMigrationDto || (is_array($createMigrationDto) && 0 === count($createMigrationDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createMigrationDto when calling migrationControllerCreate');
        }

        $resourcePath = '/sync-core/migration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createMigrationDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createMigrationDto));
            } else {
                $httpBody = $createMigrationDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity
     */
    public function migrationControllerItem($id)
    {
        list($response) = $this->migrationControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation migrationControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerItemWithHttpInfo($id)
    {
        $request = $this->migrationControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerItemAsync($id)
    {
        return $this->migrationControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationEntity';
        $request = $this->migrationControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling migrationControllerItem');
        }

        $resourcePath = '/sync-core/migration/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerList.
     *
     * @param string $groupByEntityTypeAndFlowAndSite groupByEntityTypeAndFlowAndSite (optional)
     * @param string $entityTypeMachineName           entityTypeMachineName (optional)
     * @param string $entityTypeNamespaceMachineName  entityTypeNamespaceMachineName (optional)
     * @param string $flowMachineName                 flowMachineName (optional)
     * @param string $statuses                        statuses (optional)
     * @param string $types                           types (optional)
     * @param string $siteUuid                        siteUuid (optional)
     * @param string $siteId                          siteId (optional)
     * @param string $initialSetup                    initialSetup (optional)
     * @param string $itemsPerPage                    itemsPerPage (optional)
     * @param string $page                            page (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList
     */
    public function migrationControllerList($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $itemsPerPage = null, $page = null)
    {
        list($response) = $this->migrationControllerListWithHttpInfo($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $itemsPerPage, $page);

        return $response;
    }

    /**
     * Operation migrationControllerListWithHttpInfo.
     *
     * @param string $groupByEntityTypeAndFlowAndSite (optional)
     * @param string $entityTypeMachineName           (optional)
     * @param string $entityTypeNamespaceMachineName  (optional)
     * @param string $flowMachineName                 (optional)
     * @param string $statuses                        (optional)
     * @param string $types                           (optional)
     * @param string $siteUuid                        (optional)
     * @param string $siteId                          (optional)
     * @param string $initialSetup                    (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerListWithHttpInfo($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $itemsPerPage = null, $page = null)
    {
        $request = $this->migrationControllerListRequest($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $itemsPerPage, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerListAsync.
     *
     * @param string $groupByEntityTypeAndFlowAndSite (optional)
     * @param string $entityTypeMachineName           (optional)
     * @param string $entityTypeNamespaceMachineName  (optional)
     * @param string $flowMachineName                 (optional)
     * @param string $statuses                        (optional)
     * @param string $types                           (optional)
     * @param string $siteUuid                        (optional)
     * @param string $siteId                          (optional)
     * @param string $initialSetup                    (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerListAsync($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $itemsPerPage = null, $page = null)
    {
        return $this->migrationControllerListAsyncWithHttpInfo($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $itemsPerPage, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerListAsyncWithHttpInfo.
     *
     * @param string $groupByEntityTypeAndFlowAndSite (optional)
     * @param string $entityTypeMachineName           (optional)
     * @param string $entityTypeNamespaceMachineName  (optional)
     * @param string $flowMachineName                 (optional)
     * @param string $statuses                        (optional)
     * @param string $types                           (optional)
     * @param string $siteUuid                        (optional)
     * @param string $siteId                          (optional)
     * @param string $initialSetup                    (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerListAsyncWithHttpInfo($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $itemsPerPage = null, $page = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedMigrationList';
        $request = $this->migrationControllerListRequest($groupByEntityTypeAndFlowAndSite, $entityTypeMachineName, $entityTypeNamespaceMachineName, $flowMachineName, $statuses, $types, $siteUuid, $siteId, $initialSetup, $itemsPerPage, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerList'.
     *
     * @param string $groupByEntityTypeAndFlowAndSite (optional)
     * @param string $entityTypeMachineName           (optional)
     * @param string $entityTypeNamespaceMachineName  (optional)
     * @param string $flowMachineName                 (optional)
     * @param string $statuses                        (optional)
     * @param string $types                           (optional)
     * @param string $siteUuid                        (optional)
     * @param string $siteId                          (optional)
     * @param string $initialSetup                    (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerListRequest($groupByEntityTypeAndFlowAndSite = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $flowMachineName = null, $statuses = null, $types = null, $siteUuid = null, $siteId = null, $initialSetup = null, $itemsPerPage = null, $page = null)
    {
        $resourcePath = '/sync-core/migration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $groupByEntityTypeAndFlowAndSite) {
            if ('form' === 'form' && is_array($groupByEntityTypeAndFlowAndSite)) {
                foreach ($groupByEntityTypeAndFlowAndSite as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['groupByEntityTypeAndFlowAndSite'] = $groupByEntityTypeAndFlowAndSite;
            }
        }
        // query params
        if (null !== $entityTypeMachineName) {
            if ('form' === 'form' && is_array($entityTypeMachineName)) {
                foreach ($entityTypeMachineName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityTypeMachineName'] = $entityTypeMachineName;
            }
        }
        // query params
        if (null !== $entityTypeNamespaceMachineName) {
            if ('form' === 'form' && is_array($entityTypeNamespaceMachineName)) {
                foreach ($entityTypeNamespaceMachineName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityTypeNamespaceMachineName'] = $entityTypeNamespaceMachineName;
            }
        }
        // query params
        if (null !== $flowMachineName) {
            if ('form' === 'form' && is_array($flowMachineName)) {
                foreach ($flowMachineName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['flowMachineName'] = $flowMachineName;
            }
        }
        // query params
        if (null !== $statuses) {
            if ('form' === 'form' && is_array($statuses)) {
                foreach ($statuses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['statuses'] = $statuses;
            }
        }
        // query params
        if (null !== $types) {
            if ('form' === 'form' && is_array($types)) {
                foreach ($types as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['types'] = $types;
            }
        }
        // query params
        if (null !== $siteUuid) {
            if ('form' === 'form' && is_array($siteUuid)) {
                foreach ($siteUuid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['siteUuid'] = $siteUuid;
            }
        }
        // query params
        if (null !== $siteId) {
            if ('form' === 'form' && is_array($siteId)) {
                foreach ($siteId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['siteId'] = $siteId;
            }
        }
        // query params
        if (null !== $initialSetup) {
            if ('form' === 'form' && is_array($initialSetup)) {
                foreach ($initialSetup as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['initialSetup'] = $initialSetup;
            }
        }
        // query params
        if (null !== $itemsPerPage) {
            if ('form' === 'form' && is_array($itemsPerPage)) {
                foreach ($itemsPerPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['itemsPerPage'] = $itemsPerPage;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation migrationControllerSummary.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary
     */
    public function migrationControllerSummary($id)
    {
        list($response) = $this->migrationControllerSummaryWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation migrationControllerSummaryWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function migrationControllerSummaryWithHttpInfo($id)
    {
        $request = $this->migrationControllerSummaryRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation migrationControllerSummaryAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerSummaryAsync($id)
    {
        return $this->migrationControllerSummaryAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation migrationControllerSummaryAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function migrationControllerSummaryAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\MigrationSummary';
        $request = $this->migrationControllerSummaryRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'migrationControllerSummary'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function migrationControllerSummaryRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling migrationControllerSummary');
        }

        $resourcePath = '/sync-core/migration/{id}/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation poolControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto createPoolDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity
     */
    public function poolControllerCreate($createPoolDto)
    {
        list($response) = $this->poolControllerCreateWithHttpInfo($createPoolDto);

        return $response;
    }

    /**
     * Operation poolControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolControllerCreateWithHttpInfo($createPoolDto)
    {
        $request = $this->poolControllerCreateRequest($createPoolDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerCreateAsync($createPoolDto)
    {
        return $this->poolControllerCreateAsyncWithHttpInfo($createPoolDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation poolControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerCreateAsyncWithHttpInfo($createPoolDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
        $request = $this->poolControllerCreateRequest($createPoolDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'poolControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreatePoolDto $createPoolDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function poolControllerCreateRequest($createPoolDto)
    {
        // verify the required parameter 'createPoolDto' is set
        if (null === $createPoolDto || (is_array($createPoolDto) && 0 === count($createPoolDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createPoolDto when calling poolControllerCreate');
        }

        $resourcePath = '/sync-core/pool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createPoolDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createPoolDto));
            } else {
                $httpBody = $createPoolDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation poolControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity
     */
    public function poolControllerItem($id)
    {
        list($response) = $this->poolControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation poolControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function poolControllerItemWithHttpInfo($id)
    {
        $request = $this->poolControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerItemAsync($id)
    {
        return $this->poolControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation poolControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity';
        $request = $this->poolControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'poolControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function poolControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling poolControllerItem');
        }

        $resourcePath = '/sync-core/pool/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation poolControllerList.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]
     */
    public function poolControllerList()
    {
        list($response) = $this->poolControllerListWithHttpInfo();

        return $response;
    }

    /**
     * Operation poolControllerListWithHttpInfo.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function poolControllerListWithHttpInfo()
    {
        $request = $this->poolControllerListRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation poolControllerListAsync.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerListAsync()
    {
        return $this->poolControllerListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation poolControllerListAsyncWithHttpInfo.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function poolControllerListAsyncWithHttpInfo()
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PoolEntity[]';
        $request = $this->poolControllerListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'poolControllerList'.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function poolControllerListRequest()
    {
        $resourcePath = '/sync-core/pool';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation previewsControllerList.
     *
     * @param string $flowMachineName                 flowMachineName (required)
     * @param string $existsLocally                   existsLocally (optional)
     * @param string $deletedLocally                  deletedLocally (optional)
     * @param string $deleted                         deleted (optional)
     * @param string $sourceSiteId                    sourceSiteId (optional)
     * @param string $entityTypeMachineNames          entityTypeMachineNames (optional)
     * @param string $entityTypeNamespaceMachineNames entityTypeNamespaceMachineNames (optional)
     * @param string $publishedLatest                 publishedLatest (optional)
     * @param string $publishedEarliest               publishedEarliest (optional)
     * @param string $poolMachineNames                poolMachineNames (optional)
     * @param string $itemsPerPage                    itemsPerPage (optional)
     * @param string $page                            page (optional)
     * @param string $search                          search (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse
     */
    public function previewsControllerList($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null)
    {
        list($response) = $this->previewsControllerListWithHttpInfo($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search);

        return $response;
    }

    /**
     * Operation previewsControllerListWithHttpInfo.
     *
     * @param string $flowMachineName                 (required)
     * @param string $existsLocally                   (optional)
     * @param string $deletedLocally                  (optional)
     * @param string $deleted                         (optional)
     * @param string $sourceSiteId                    (optional)
     * @param string $entityTypeMachineNames          (optional)
     * @param string $entityTypeNamespaceMachineNames (optional)
     * @param string $publishedLatest                 (optional)
     * @param string $publishedEarliest               (optional)
     * @param string $poolMachineNames                (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     * @param string $search                          (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewsControllerListWithHttpInfo($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null)
    {
        $request = $this->previewsControllerListRequest($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation previewsControllerListAsync.
     *
     * @param string $flowMachineName                 (required)
     * @param string $existsLocally                   (optional)
     * @param string $deletedLocally                  (optional)
     * @param string $deleted                         (optional)
     * @param string $sourceSiteId                    (optional)
     * @param string $entityTypeMachineNames          (optional)
     * @param string $entityTypeNamespaceMachineNames (optional)
     * @param string $publishedLatest                 (optional)
     * @param string $publishedEarliest               (optional)
     * @param string $poolMachineNames                (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     * @param string $search                          (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewsControllerListAsync($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null)
    {
        return $this->previewsControllerListAsyncWithHttpInfo($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation previewsControllerListAsyncWithHttpInfo.
     *
     * @param string $flowMachineName                 (required)
     * @param string $existsLocally                   (optional)
     * @param string $deletedLocally                  (optional)
     * @param string $deleted                         (optional)
     * @param string $sourceSiteId                    (optional)
     * @param string $entityTypeMachineNames          (optional)
     * @param string $entityTypeNamespaceMachineNames (optional)
     * @param string $publishedLatest                 (optional)
     * @param string $publishedEarliest               (optional)
     * @param string $poolMachineNames                (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     * @param string $search                          (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewsControllerListAsyncWithHttpInfo($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PreviewsListResponse';
        $request = $this->previewsControllerListRequest($flowMachineName, $existsLocally, $deletedLocally, $deleted, $sourceSiteId, $entityTypeMachineNames, $entityTypeNamespaceMachineNames, $publishedLatest, $publishedEarliest, $poolMachineNames, $itemsPerPage, $page, $search);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'previewsControllerList'.
     *
     * @param string $flowMachineName                 (required)
     * @param string $existsLocally                   (optional)
     * @param string $deletedLocally                  (optional)
     * @param string $deleted                         (optional)
     * @param string $sourceSiteId                    (optional)
     * @param string $entityTypeMachineNames          (optional)
     * @param string $entityTypeNamespaceMachineNames (optional)
     * @param string $publishedLatest                 (optional)
     * @param string $publishedEarliest               (optional)
     * @param string $poolMachineNames                (optional)
     * @param string $itemsPerPage                    (optional)
     * @param string $page                            (optional)
     * @param string $search                          (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function previewsControllerListRequest($flowMachineName, $existsLocally = null, $deletedLocally = null, $deleted = null, $sourceSiteId = null, $entityTypeMachineNames = null, $entityTypeNamespaceMachineNames = null, $publishedLatest = null, $publishedEarliest = null, $poolMachineNames = null, $itemsPerPage = null, $page = null, $search = null)
    {
        // verify the required parameter 'flowMachineName' is set
        if (null === $flowMachineName || (is_array($flowMachineName) && 0 === count($flowMachineName))) {
            throw new \InvalidArgumentException('Missing the required parameter $flowMachineName when calling previewsControllerList');
        }

        $resourcePath = '/sync-core/previews/{flowMachineName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $existsLocally) {
            if ('form' === 'form' && is_array($existsLocally)) {
                foreach ($existsLocally as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['existsLocally'] = $existsLocally;
            }
        }
        // query params
        if (null !== $deletedLocally) {
            if ('form' === 'form' && is_array($deletedLocally)) {
                foreach ($deletedLocally as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['deletedLocally'] = $deletedLocally;
            }
        }
        // query params
        if (null !== $deleted) {
            if ('form' === 'form' && is_array($deleted)) {
                foreach ($deleted as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['deleted'] = $deleted;
            }
        }
        // query params
        if (null !== $sourceSiteId) {
            if ('form' === 'form' && is_array($sourceSiteId)) {
                foreach ($sourceSiteId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['sourceSiteId'] = $sourceSiteId;
            }
        }
        // query params
        if (null !== $entityTypeMachineNames) {
            if ('form' === 'form' && is_array($entityTypeMachineNames)) {
                foreach ($entityTypeMachineNames as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityTypeMachineNames'] = $entityTypeMachineNames;
            }
        }
        // query params
        if (null !== $entityTypeNamespaceMachineNames) {
            if ('form' === 'form' && is_array($entityTypeNamespaceMachineNames)) {
                foreach ($entityTypeNamespaceMachineNames as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityTypeNamespaceMachineNames'] = $entityTypeNamespaceMachineNames;
            }
        }
        // query params
        if (null !== $publishedLatest) {
            if ('form' === 'form' && is_array($publishedLatest)) {
                foreach ($publishedLatest as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['publishedLatest'] = $publishedLatest;
            }
        }
        // query params
        if (null !== $publishedEarliest) {
            if ('form' === 'form' && is_array($publishedEarliest)) {
                foreach ($publishedEarliest as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['publishedEarliest'] = $publishedEarliest;
            }
        }
        // query params
        if (null !== $poolMachineNames) {
            if ('form' === 'form' && is_array($poolMachineNames)) {
                foreach ($poolMachineNames as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['poolMachineNames'] = $poolMachineNames;
            }
        }
        // query params
        if (null !== $itemsPerPage) {
            if ('form' === 'form' && is_array($itemsPerPage)) {
                foreach ($itemsPerPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['itemsPerPage'] = $itemsPerPage;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if (null !== $search) {
            if ('form' === 'form' && is_array($search)) {
                foreach ($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['search'] = $search;
            }
        }

        // path params
        if (null !== $flowMachineName) {
            $resourcePath = str_replace(
                '{'.'flowMachineName'.'}',
                ObjectSerializer::toPathValue($flowMachineName),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity
     */
    public function projectControllerItem($id)
    {
        list($response) = $this->projectControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation projectControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectControllerItemWithHttpInfo($id)
    {
        $request = $this->projectControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemAsync($id)
    {
        return $this->projectControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation projectControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
        $request = $this->projectControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'projectControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling projectControllerItem');
        }

        $resourcePath = '/sync-core/project/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation projectControllerItemByUuid.
     *
     * @param string $uuid uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity
     */
    public function projectControllerItemByUuid($uuid)
    {
        list($response) = $this->projectControllerItemByUuidWithHttpInfo($uuid);

        return $response;
    }

    /**
     * Operation projectControllerItemByUuidWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function projectControllerItemByUuidWithHttpInfo($uuid)
    {
        $request = $this->projectControllerItemByUuidRequest($uuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation projectControllerItemByUuidAsync.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemByUuidAsync($uuid)
    {
        return $this->projectControllerItemByUuidAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation projectControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function projectControllerItemByUuidAsyncWithHttpInfo($uuid)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\ProjectEntity';
        $request = $this->projectControllerItemByUuidRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'projectControllerItemByUuid'.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function projectControllerItemByUuidRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException('Missing the required parameter $uuid when calling projectControllerItemByUuid');
        }

        $resourcePath = '/sync-core/project/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto createRemoteEntityRevisionDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult
     */
    public function remoteEntityRevisionControllerCreate($createRemoteEntityRevisionDto)
    {
        list($response) = $this->remoteEntityRevisionControllerCreateWithHttpInfo($createRemoteEntityRevisionDto);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerCreateWithHttpInfo($createRemoteEntityRevisionDto)
    {
        $request = $this->remoteEntityRevisionControllerCreateRequest($createRemoteEntityRevisionDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerCreateAsync($createRemoteEntityRevisionDto)
    {
        return $this->remoteEntityRevisionControllerCreateAsyncWithHttpInfo($createRemoteEntityRevisionDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerCreateAsyncWithHttpInfo($createRemoteEntityRevisionDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntityPushResult';
        $request = $this->remoteEntityRevisionControllerCreateRequest($createRemoteEntityRevisionDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityRevisionDto $createRemoteEntityRevisionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerCreateRequest($createRemoteEntityRevisionDto)
    {
        // verify the required parameter 'createRemoteEntityRevisionDto' is set
        if (null === $createRemoteEntityRevisionDto || (is_array($createRemoteEntityRevisionDto) && 0 === count($createRemoteEntityRevisionDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createRemoteEntityRevisionDto when calling remoteEntityRevisionControllerCreate');
        }

        $resourcePath = '/sync-core/remote-entity-revision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createRemoteEntityRevisionDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createRemoteEntityRevisionDto));
            } else {
                $httpBody = $createRemoteEntityRevisionDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerDelete.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto deleteRemoteEntityRevisionDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse
     */
    public function remoteEntityRevisionControllerDelete($deleteRemoteEntityRevisionDto)
    {
        list($response) = $this->remoteEntityRevisionControllerDeleteWithHttpInfo($deleteRemoteEntityRevisionDto);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerDeleteWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerDeleteWithHttpInfo($deleteRemoteEntityRevisionDto)
    {
        $request = $this->remoteEntityRevisionControllerDeleteRequest($deleteRemoteEntityRevisionDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerDeleteAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerDeleteAsync($deleteRemoteEntityRevisionDto)
    {
        return $this->remoteEntityRevisionControllerDeleteAsyncWithHttpInfo($deleteRemoteEntityRevisionDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerDeleteAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerDeleteAsyncWithHttpInfo($deleteRemoteEntityRevisionDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SuccessResponse';
        $request = $this->remoteEntityRevisionControllerDeleteRequest($deleteRemoteEntityRevisionDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerDelete'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DeleteRemoteEntityRevisionDto $deleteRemoteEntityRevisionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerDeleteRequest($deleteRemoteEntityRevisionDto)
    {
        // verify the required parameter 'deleteRemoteEntityRevisionDto' is set
        if (null === $deleteRemoteEntityRevisionDto || (is_array($deleteRemoteEntityRevisionDto) && 0 === count($deleteRemoteEntityRevisionDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $deleteRemoteEntityRevisionDto when calling remoteEntityRevisionControllerDelete');
        }

        $resourcePath = '/sync-core/remote-entity-revision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($deleteRemoteEntityRevisionDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($deleteRemoteEntityRevisionDto));
            } else {
                $httpBody = $deleteRemoteEntityRevisionDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity
     */
    public function remoteEntityRevisionControllerItem($id)
    {
        list($response) = $this->remoteEntityRevisionControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerItemWithHttpInfo($id)
    {
        $request = $this->remoteEntityRevisionControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerItemAsync($id)
    {
        return $this->remoteEntityRevisionControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityRevisionEntity';
        $request = $this->remoteEntityRevisionControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling remoteEntityRevisionControllerItem');
        }

        $resourcePath = '/sync-core/remote-entity-revision/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerList.
     *
     * @param string $poolMachineName                poolMachineName (optional)
     * @param string $entityTypeMachineName          entityTypeMachineName (optional)
     * @param string $entityTypeNamespaceMachineName entityTypeNamespaceMachineName (optional)
     * @param float  $page                           page (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList
     */
    public function remoteEntityRevisionControllerList($poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null)
    {
        list($response) = $this->remoteEntityRevisionControllerListWithHttpInfo($poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerListWithHttpInfo.
     *
     * @param string $poolMachineName                (optional)
     * @param string $entityTypeMachineName          (optional)
     * @param string $entityTypeNamespaceMachineName (optional)
     * @param float  $page                           (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerListWithHttpInfo($poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null)
    {
        $request = $this->remoteEntityRevisionControllerListRequest($poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerListAsync.
     *
     * @param string $poolMachineName                (optional)
     * @param string $entityTypeMachineName          (optional)
     * @param string $entityTypeNamespaceMachineName (optional)
     * @param float  $page                           (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerListAsync($poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null)
    {
        return $this->remoteEntityRevisionControllerListAsyncWithHttpInfo($poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerListAsyncWithHttpInfo.
     *
     * @param string $poolMachineName                (optional)
     * @param string $entityTypeMachineName          (optional)
     * @param string $entityTypeNamespaceMachineName (optional)
     * @param float  $page                           (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerListAsyncWithHttpInfo($poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityRevisionList';
        $request = $this->remoteEntityRevisionControllerListRequest($poolMachineName, $entityTypeMachineName, $entityTypeNamespaceMachineName, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerList'.
     *
     * @param string $poolMachineName                (optional)
     * @param string $entityTypeMachineName          (optional)
     * @param string $entityTypeNamespaceMachineName (optional)
     * @param float  $page                           (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerListRequest($poolMachineName = null, $entityTypeMachineName = null, $entityTypeNamespaceMachineName = null, $page = null)
    {
        $resourcePath = '/sync-core/remote-entity-revision';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $poolMachineName) {
            if ('form' === 'form' && is_array($poolMachineName)) {
                foreach ($poolMachineName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['poolMachineName'] = $poolMachineName;
            }
        }
        // query params
        if (null !== $entityTypeMachineName) {
            if ('form' === 'form' && is_array($entityTypeMachineName)) {
                foreach ($entityTypeMachineName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityTypeMachineName'] = $entityTypeMachineName;
            }
        }
        // query params
        if (null !== $entityTypeNamespaceMachineName) {
            if ('form' === 'form' && is_array($entityTypeNamespaceMachineName)) {
                foreach ($entityTypeNamespaceMachineName as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityTypeNamespaceMachineName'] = $entityTypeNamespaceMachineName;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityRevisionControllerSerialize.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return string
     */
    public function remoteEntityRevisionControllerSerialize($id)
    {
        list($response) = $this->remoteEntityRevisionControllerSerializeWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation remoteEntityRevisionControllerSerializeWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityRevisionControllerSerializeWithHttpInfo($id)
    {
        $request = $this->remoteEntityRevisionControllerSerializeRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = 'string';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityRevisionControllerSerializeAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerSerializeAsync($id)
    {
        return $this->remoteEntityRevisionControllerSerializeAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityRevisionControllerSerializeAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityRevisionControllerSerializeAsyncWithHttpInfo($id)
    {
        $returnType = 'string';
        $request = $this->remoteEntityRevisionControllerSerializeRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityRevisionControllerSerialize'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityRevisionControllerSerializeRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling remoteEntityRevisionControllerSerialize');
        }

        $resourcePath = '/sync-core/remote-entity-revision/{id}/serialize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/yaml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/yaml'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeControllerByMachineName.
     *
     * @param string $machineName          machineName (required)
     * @param string $namespaceMachineName namespaceMachineName (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity
     */
    public function remoteEntityTypeControllerByMachineName($machineName, $namespaceMachineName)
    {
        list($response) = $this->remoteEntityTypeControllerByMachineNameWithHttpInfo($machineName, $namespaceMachineName);

        return $response;
    }

    /**
     * Operation remoteEntityTypeControllerByMachineNameWithHttpInfo.
     *
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeControllerByMachineNameWithHttpInfo($machineName, $namespaceMachineName)
    {
        $request = $this->remoteEntityTypeControllerByMachineNameRequest($machineName, $namespaceMachineName);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeControllerByMachineNameAsync.
     *
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerByMachineNameAsync($machineName, $namespaceMachineName)
    {
        return $this->remoteEntityTypeControllerByMachineNameAsyncWithHttpInfo($machineName, $namespaceMachineName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeControllerByMachineNameAsyncWithHttpInfo.
     *
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerByMachineNameAsyncWithHttpInfo($machineName, $namespaceMachineName)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
        $request = $this->remoteEntityTypeControllerByMachineNameRequest($machineName, $namespaceMachineName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeControllerByMachineName'.
     *
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeControllerByMachineNameRequest($machineName, $namespaceMachineName)
    {
        // verify the required parameter 'machineName' is set
        if (null === $machineName || (is_array($machineName) && 0 === count($machineName))) {
            throw new \InvalidArgumentException('Missing the required parameter $machineName when calling remoteEntityTypeControllerByMachineName');
        }
        // verify the required parameter 'namespaceMachineName' is set
        if (null === $namespaceMachineName || (is_array($namespaceMachineName) && 0 === count($namespaceMachineName))) {
            throw new \InvalidArgumentException('Missing the required parameter $namespaceMachineName when calling remoteEntityTypeControllerByMachineName');
        }

        $resourcePath = '/sync-core/remote-entity-type/by-machine-name/{namespaceMachineName}/{machineName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $machineName) {
            $resourcePath = str_replace(
                '{'.'machineName'.'}',
                ObjectSerializer::toPathValue($machineName),
                $resourcePath
            );
        }
        // path params
        if (null !== $namespaceMachineName) {
            $resourcePath = str_replace(
                '{'.'namespaceMachineName'.'}',
                ObjectSerializer::toPathValue($namespaceMachineName),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity
     */
    public function remoteEntityTypeControllerItem($id)
    {
        list($response) = $this->remoteEntityTypeControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation remoteEntityTypeControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeControllerItemWithHttpInfo($id)
    {
        $request = $this->remoteEntityTypeControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerItemAsync($id)
    {
        return $this->remoteEntityTypeControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity';
        $request = $this->remoteEntityTypeControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling remoteEntityTypeControllerItem');
        }

        $resourcePath = '/sync-core/remote-entity-type/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeControllerList.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]
     */
    public function remoteEntityTypeControllerList()
    {
        list($response) = $this->remoteEntityTypeControllerListWithHttpInfo();

        return $response;
    }

    /**
     * Operation remoteEntityTypeControllerListWithHttpInfo.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeControllerListWithHttpInfo()
    {
        $request = $this->remoteEntityTypeControllerListRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeControllerListAsync.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerListAsync()
    {
        return $this->remoteEntityTypeControllerListAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeControllerListAsyncWithHttpInfo.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeControllerListAsyncWithHttpInfo()
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeEntity[]';
        $request = $this->remoteEntityTypeControllerListRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeControllerList'.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeControllerListRequest()
    {
        $resourcePath = '/sync-core/remote-entity-type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto createRemoteEntityTypeVersionDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity
     */
    public function remoteEntityTypeVersionControllerCreate($createRemoteEntityTypeVersionDto)
    {
        list($response) = $this->remoteEntityTypeVersionControllerCreateWithHttpInfo($createRemoteEntityTypeVersionDto);

        return $response;
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeVersionControllerCreateWithHttpInfo($createRemoteEntityTypeVersionDto)
    {
        $request = $this->remoteEntityTypeVersionControllerCreateRequest($createRemoteEntityTypeVersionDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerCreateAsync($createRemoteEntityTypeVersionDto)
    {
        return $this->remoteEntityTypeVersionControllerCreateAsyncWithHttpInfo($createRemoteEntityTypeVersionDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeVersionControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerCreateAsyncWithHttpInfo($createRemoteEntityTypeVersionDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
        $request = $this->remoteEntityTypeVersionControllerCreateRequest($createRemoteEntityTypeVersionDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeVersionControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateRemoteEntityTypeVersionDto $createRemoteEntityTypeVersionDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeVersionControllerCreateRequest($createRemoteEntityTypeVersionDto)
    {
        // verify the required parameter 'createRemoteEntityTypeVersionDto' is set
        if (null === $createRemoteEntityTypeVersionDto || (is_array($createRemoteEntityTypeVersionDto) && 0 === count($createRemoteEntityTypeVersionDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createRemoteEntityTypeVersionDto when calling remoteEntityTypeVersionControllerCreate');
        }

        $resourcePath = '/sync-core/remote-entity-type-version';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createRemoteEntityTypeVersionDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createRemoteEntityTypeVersionDto));
            } else {
                $httpBody = $createRemoteEntityTypeVersionDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsage.
     *
     * @param string $versionId            versionId (required)
     * @param string $machineName          machineName (required)
     * @param string $namespaceMachineName namespaceMachineName (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage
     */
    public function remoteEntityTypeVersionControllerGetVersionUsage($versionId, $machineName, $namespaceMachineName)
    {
        list($response) = $this->remoteEntityTypeVersionControllerGetVersionUsageWithHttpInfo($versionId, $machineName, $namespaceMachineName);

        return $response;
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsageWithHttpInfo.
     *
     * @param string $versionId            (required)
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageWithHttpInfo($versionId, $machineName, $namespaceMachineName)
    {
        $request = $this->remoteEntityTypeVersionControllerGetVersionUsageRequest($versionId, $machineName, $namespaceMachineName);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsageAsync.
     *
     * @param string $versionId            (required)
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageAsync($versionId, $machineName, $namespaceMachineName)
    {
        return $this->remoteEntityTypeVersionControllerGetVersionUsageAsyncWithHttpInfo($versionId, $machineName, $namespaceMachineName)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeVersionControllerGetVersionUsageAsyncWithHttpInfo.
     *
     * @param string $versionId            (required)
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageAsyncWithHttpInfo($versionId, $machineName, $namespaceMachineName)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\EntityTypeVersionUsage';
        $request = $this->remoteEntityTypeVersionControllerGetVersionUsageRequest($versionId, $machineName, $namespaceMachineName);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeVersionControllerGetVersionUsage'.
     *
     * @param string $versionId            (required)
     * @param string $machineName          (required)
     * @param string $namespaceMachineName (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeVersionControllerGetVersionUsageRequest($versionId, $machineName, $namespaceMachineName)
    {
        // verify the required parameter 'versionId' is set
        if (null === $versionId || (is_array($versionId) && 0 === count($versionId))) {
            throw new \InvalidArgumentException('Missing the required parameter $versionId when calling remoteEntityTypeVersionControllerGetVersionUsage');
        }
        // verify the required parameter 'machineName' is set
        if (null === $machineName || (is_array($machineName) && 0 === count($machineName))) {
            throw new \InvalidArgumentException('Missing the required parameter $machineName when calling remoteEntityTypeVersionControllerGetVersionUsage');
        }
        // verify the required parameter 'namespaceMachineName' is set
        if (null === $namespaceMachineName || (is_array($namespaceMachineName) && 0 === count($namespaceMachineName))) {
            throw new \InvalidArgumentException('Missing the required parameter $namespaceMachineName when calling remoteEntityTypeVersionControllerGetVersionUsage');
        }

        $resourcePath = '/sync-core/remote-entity-type-version/differences/{namespaceMachineName}/{machineName}/{versionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $versionId) {
            $resourcePath = str_replace(
                '{'.'versionId'.'}',
                ObjectSerializer::toPathValue($versionId),
                $resourcePath
            );
        }
        // path params
        if (null !== $machineName) {
            $resourcePath = str_replace(
                '{'.'machineName'.'}',
                ObjectSerializer::toPathValue($machineName),
                $resourcePath
            );
        }
        // path params
        if (null !== $namespaceMachineName) {
            $resourcePath = str_replace(
                '{'.'namespaceMachineName'.'}',
                ObjectSerializer::toPathValue($namespaceMachineName),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityTypeVersionControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity
     */
    public function remoteEntityTypeVersionControllerItem($id)
    {
        list($response) = $this->remoteEntityTypeVersionControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation remoteEntityTypeVersionControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityTypeVersionControllerItemWithHttpInfo($id)
    {
        $request = $this->remoteEntityTypeVersionControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityTypeVersionControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerItemAsync($id)
    {
        return $this->remoteEntityTypeVersionControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityTypeVersionControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityTypeVersionControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityTypeVersionEntity';
        $request = $this->remoteEntityTypeVersionControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityTypeVersionControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityTypeVersionControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling remoteEntityTypeVersionControllerItem');
        }

        $resourcePath = '/sync-core/remote-entity-type-version/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityUsageControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity
     */
    public function remoteEntityUsageControllerItem($id)
    {
        list($response) = $this->remoteEntityUsageControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation remoteEntityUsageControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityUsageControllerItemWithHttpInfo($id)
    {
        $request = $this->remoteEntityUsageControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityUsageControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerItemAsync($id)
    {
        return $this->remoteEntityUsageControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityUsageControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\RemoteEntityUsageEntity';
        $request = $this->remoteEntityUsageControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityUsageControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityUsageControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling remoteEntityUsageControllerItem');
        }

        $resourcePath = '/sync-core/remote-entity-usage/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation remoteEntityUsageControllerList.
     *
     * @param string $itemsPerPage   itemsPerPage (optional)
     * @param string $page           page (optional)
     * @param string $entityTypeId   entityTypeId (optional)
     * @param string $siteId         siteId (optional)
     * @param string $entityId       entityId (optional)
     * @param string $remoteUniqueId remoteUniqueId (optional)
     * @param string $remoteUuid     remoteUuid (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse
     */
    public function remoteEntityUsageControllerList($itemsPerPage = null, $page = null, $entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null)
    {
        list($response) = $this->remoteEntityUsageControllerListWithHttpInfo($itemsPerPage, $page, $entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid);

        return $response;
    }

    /**
     * Operation remoteEntityUsageControllerListWithHttpInfo.
     *
     * @param string $itemsPerPage   (optional)
     * @param string $page           (optional)
     * @param string $entityTypeId   (optional)
     * @param string $siteId         (optional)
     * @param string $entityId       (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $remoteUuid     (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function remoteEntityUsageControllerListWithHttpInfo($itemsPerPage = null, $page = null, $entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null)
    {
        $request = $this->remoteEntityUsageControllerListRequest($itemsPerPage, $page, $entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation remoteEntityUsageControllerListAsync.
     *
     * @param string $itemsPerPage   (optional)
     * @param string $page           (optional)
     * @param string $entityTypeId   (optional)
     * @param string $siteId         (optional)
     * @param string $entityId       (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $remoteUuid     (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerListAsync($itemsPerPage = null, $page = null, $entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null)
    {
        return $this->remoteEntityUsageControllerListAsyncWithHttpInfo($itemsPerPage, $page, $entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation remoteEntityUsageControllerListAsyncWithHttpInfo.
     *
     * @param string $itemsPerPage   (optional)
     * @param string $page           (optional)
     * @param string $entityTypeId   (optional)
     * @param string $siteId         (optional)
     * @param string $entityId       (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $remoteUuid     (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function remoteEntityUsageControllerListAsyncWithHttpInfo($itemsPerPage = null, $page = null, $entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedRemoteEntityUsageListResponse';
        $request = $this->remoteEntityUsageControllerListRequest($itemsPerPage, $page, $entityTypeId, $siteId, $entityId, $remoteUniqueId, $remoteUuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'remoteEntityUsageControllerList'.
     *
     * @param string $itemsPerPage   (optional)
     * @param string $page           (optional)
     * @param string $entityTypeId   (optional)
     * @param string $siteId         (optional)
     * @param string $entityId       (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $remoteUuid     (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function remoteEntityUsageControllerListRequest($itemsPerPage = null, $page = null, $entityTypeId = null, $siteId = null, $entityId = null, $remoteUniqueId = null, $remoteUuid = null)
    {
        $resourcePath = '/sync-core/remote-entity-usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $itemsPerPage) {
            if ('form' === 'form' && is_array($itemsPerPage)) {
                foreach ($itemsPerPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['itemsPerPage'] = $itemsPerPage;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if (null !== $entityTypeId) {
            if ('form' === 'form' && is_array($entityTypeId)) {
                foreach ($entityTypeId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityTypeId'] = $entityTypeId;
            }
        }
        // query params
        if (null !== $siteId) {
            if ('form' === 'form' && is_array($siteId)) {
                foreach ($siteId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['siteId'] = $siteId;
            }
        }
        // query params
        if (null !== $entityId) {
            if ('form' === 'form' && is_array($entityId)) {
                foreach ($entityId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityId'] = $entityId;
            }
        }
        // query params
        if (null !== $remoteUniqueId) {
            if ('form' === 'form' && is_array($remoteUniqueId)) {
                foreach ($remoteUniqueId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['remoteUniqueId'] = $remoteUniqueId;
            }
        }
        // query params
        if (null !== $remoteUuid) {
            if ('form' === 'form' && is_array($remoteUuid)) {
                foreach ($remoteUuid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['remoteUuid'] = $remoteUuid;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerItem.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerItem($id)
    {
        list($response) = $this->siteControllerItemWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation siteControllerItemWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerItemWithHttpInfo($id)
    {
        $request = $this->siteControllerItemRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerItemAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemAsync($id)
    {
        return $this->siteControllerItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerItemAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerItem'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling siteControllerItem');
        }

        $resourcePath = '/sync-core/site/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerItemByUuid.
     *
     * @param string $uuid uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerItemByUuid($uuid)
    {
        list($response) = $this->siteControllerItemByUuidWithHttpInfo($uuid);

        return $response;
    }

    /**
     * Operation siteControllerItemByUuidWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerItemByUuidWithHttpInfo($uuid)
    {
        $request = $this->siteControllerItemByUuidRequest($uuid);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerItemByUuidAsync.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemByUuidAsync($uuid)
    {
        return $this->siteControllerItemByUuidAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerItemByUuidAsyncWithHttpInfo.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerItemByUuidAsyncWithHttpInfo($uuid)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerItemByUuidRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerItemByUuid'.
     *
     * @param string $uuid (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerItemByUuidRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if (null === $uuid || (is_array($uuid) && 0 === count($uuid))) {
            throw new \InvalidArgumentException('Missing the required parameter $uuid when calling siteControllerItemByUuid');
        }

        $resourcePath = '/sync-core/site/by-uuid/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $uuid) {
            $resourcePath = str_replace(
                '{'.'uuid'.'}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerRegister.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto registerSiteDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerRegister($registerSiteDto)
    {
        list($response) = $this->siteControllerRegisterWithHttpInfo($registerSiteDto);

        return $response;
    }

    /**
     * Operation siteControllerRegisterWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerRegisterWithHttpInfo($registerSiteDto)
    {
        $request = $this->siteControllerRegisterRequest($registerSiteDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerRegisterAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRegisterAsync($registerSiteDto)
    {
        return $this->siteControllerRegisterAsyncWithHttpInfo($registerSiteDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerRegisterAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerRegisterAsyncWithHttpInfo($registerSiteDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerRegisterRequest($registerSiteDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerRegister'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\RegisterSiteDto $registerSiteDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerRegisterRequest($registerSiteDto)
    {
        // verify the required parameter 'registerSiteDto' is set
        if (null === $registerSiteDto || (is_array($registerSiteDto) && 0 === count($registerSiteDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $registerSiteDto when calling siteControllerRegister');
        }

        $resourcePath = '/sync-core/site';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($registerSiteDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($registerSiteDto));
            } else {
                $httpBody = $registerSiteDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerSearch.
     *
     * @param string $baseUrl baseUrl (optional)
     * @param string $search  search (optional)
     * @param string $page    page (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList
     */
    public function siteControllerSearch($baseUrl = null, $search = null, $page = null)
    {
        list($response) = $this->siteControllerSearchWithHttpInfo($baseUrl, $search, $page);

        return $response;
    }

    /**
     * Operation siteControllerSearchWithHttpInfo.
     *
     * @param string $baseUrl (optional)
     * @param string $search  (optional)
     * @param string $page    (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerSearchWithHttpInfo($baseUrl = null, $search = null, $page = null)
    {
        $request = $this->siteControllerSearchRequest($baseUrl, $search, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerSearchAsync.
     *
     * @param string $baseUrl (optional)
     * @param string $search  (optional)
     * @param string $page    (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerSearchAsync($baseUrl = null, $search = null, $page = null)
    {
        return $this->siteControllerSearchAsyncWithHttpInfo($baseUrl, $search, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerSearchAsyncWithHttpInfo.
     *
     * @param string $baseUrl (optional)
     * @param string $search  (optional)
     * @param string $page    (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerSearchAsyncWithHttpInfo($baseUrl = null, $search = null, $page = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSiteList';
        $request = $this->siteControllerSearchRequest($baseUrl, $search, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerSearch'.
     *
     * @param string $baseUrl (optional)
     * @param string $search  (optional)
     * @param string $page    (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerSearchRequest($baseUrl = null, $search = null, $page = null)
    {
        $resourcePath = '/sync-core/site';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $baseUrl) {
            if ('form' === 'form' && is_array($baseUrl)) {
                foreach ($baseUrl as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['baseUrl'] = $baseUrl;
            }
        }
        // query params
        if (null !== $search) {
            if ('form' === 'form' && is_array($search)) {
                foreach ($search as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['search'] = $search;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteControllerUpdate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto createSiteDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity
     */
    public function siteControllerUpdate($createSiteDto)
    {
        list($response) = $this->siteControllerUpdateWithHttpInfo($createSiteDto);

        return $response;
    }

    /**
     * Operation siteControllerUpdateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SiteEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteControllerUpdateWithHttpInfo($createSiteDto)
    {
        $request = $this->siteControllerUpdateRequest($createSiteDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation siteControllerUpdateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerUpdateAsync($createSiteDto)
    {
        return $this->siteControllerUpdateAsyncWithHttpInfo($createSiteDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation siteControllerUpdateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteControllerUpdateAsyncWithHttpInfo($createSiteDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SiteEntity';
        $request = $this->siteControllerUpdateRequest($createSiteDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'siteControllerUpdate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSiteDto $createSiteDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function siteControllerUpdateRequest($createSiteDto)
    {
        // verify the required parameter 'createSiteDto' is set
        if (null === $createSiteDto || (is_array($createSiteDto) && 0 === count($createSiteDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createSiteDto when calling siteControllerUpdate');
        }

        $resourcePath = '/sync-core/site';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createSiteDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createSiteDto));
            } else {
                $httpBody = $createSiteDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerCreate.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto createSyndicationDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity
     */
    public function syndicationControllerCreate($createSyndicationDto)
    {
        list($response) = $this->syndicationControllerCreateWithHttpInfo($createSyndicationDto);

        return $response;
    }

    /**
     * Operation syndicationControllerCreateWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerCreateWithHttpInfo($createSyndicationDto)
    {
        $request = $this->syndicationControllerCreateRequest($createSyndicationDto);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerCreateAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerCreateAsync($createSyndicationDto)
    {
        return $this->syndicationControllerCreateAsyncWithHttpInfo($createSyndicationDto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerCreateAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerCreateAsyncWithHttpInfo($createSyndicationDto)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntity';
        $request = $this->syndicationControllerCreateRequest($createSyndicationDto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerCreate'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\CreateSyndicationDto $createSyndicationDto (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerCreateRequest($createSyndicationDto)
    {
        // verify the required parameter 'createSyndicationDto' is set
        if (null === $createSyndicationDto || (is_array($createSyndicationDto) && 0 === count($createSyndicationDto))) {
            throw new \InvalidArgumentException('Missing the required parameter $createSyndicationDto when calling syndicationControllerCreate');
        }

        $resourcePath = '/sync-core/syndication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($createSyndicationDto)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($createSyndicationDto));
            } else {
                $httpBody = $createSyndicationDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerGetErrors.
     *
     * @param string $itemsPerPage itemsPerPage (optional)
     * @param string $page         page (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList
     */
    public function syndicationControllerGetErrors($itemsPerPage = null, $page = null)
    {
        list($response) = $this->syndicationControllerGetErrorsWithHttpInfo($itemsPerPage, $page);

        return $response;
    }

    /**
     * Operation syndicationControllerGetErrorsWithHttpInfo.
     *
     * @param string $itemsPerPage (optional)
     * @param string $page         (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerGetErrorsWithHttpInfo($itemsPerPage = null, $page = null)
    {
        $request = $this->syndicationControllerGetErrorsRequest($itemsPerPage, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerGetErrorsAsync.
     *
     * @param string $itemsPerPage (optional)
     * @param string $page         (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerGetErrorsAsync($itemsPerPage = null, $page = null)
    {
        return $this->syndicationControllerGetErrorsAsyncWithHttpInfo($itemsPerPage, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerGetErrorsAsyncWithHttpInfo.
     *
     * @param string $itemsPerPage (optional)
     * @param string $page         (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerGetErrorsAsyncWithHttpInfo($itemsPerPage = null, $page = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationErrorList';
        $request = $this->syndicationControllerGetErrorsRequest($itemsPerPage, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerGetErrors'.
     *
     * @param string $itemsPerPage (optional)
     * @param string $page         (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerGetErrorsRequest($itemsPerPage = null, $page = null)
    {
        $resourcePath = '/sync-core/syndication/errors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $itemsPerPage) {
            if ('form' === 'form' && is_array($itemsPerPage)) {
                foreach ($itemsPerPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['itemsPerPage'] = $itemsPerPage;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerItem.
     *
     * @param string $id           id (required)
     * @param string $includeUsage includeUsage (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage
     */
    public function syndicationControllerItem($id, $includeUsage = null)
    {
        list($response) = $this->syndicationControllerItemWithHttpInfo($id, $includeUsage);

        return $response;
    }

    /**
     * Operation syndicationControllerItemWithHttpInfo.
     *
     * @param string $id           (required)
     * @param string $includeUsage (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerItemWithHttpInfo($id, $includeUsage = null)
    {
        $request = $this->syndicationControllerItemRequest($id, $includeUsage);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerItemAsync.
     *
     * @param string $id           (required)
     * @param string $includeUsage (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerItemAsync($id, $includeUsage = null)
    {
        return $this->syndicationControllerItemAsyncWithHttpInfo($id, $includeUsage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerItemAsyncWithHttpInfo.
     *
     * @param string $id           (required)
     * @param string $includeUsage (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerItemAsyncWithHttpInfo($id, $includeUsage = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage';
        $request = $this->syndicationControllerItemRequest($id, $includeUsage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerItem'.
     *
     * @param string $id           (required)
     * @param string $includeUsage (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerItemRequest($id, $includeUsage = null)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling syndicationControllerItem');
        }

        $resourcePath = '/sync-core/syndication/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $includeUsage) {
            if ('form' === 'form' && is_array($includeUsage)) {
                foreach ($includeUsage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['includeUsage'] = $includeUsage;
            }
        }

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerList.
     *
     * @param string $statuses              statuses (optional)
     * @param string $migrationId           migrationId (optional)
     * @param string $includeUsage          includeUsage (optional)
     * @param string $sourceSyndicationId   sourceSyndicationId (optional)
     * @param string $flowMachineNames      flowMachineNames (optional)
     * @param string $flowIds               flowIds (optional)
     * @param string $poolMachineNames      poolMachineNames (optional)
     * @param string $poolIds               poolIds (optional)
     * @param string $siteUuids             siteUuids (optional)
     * @param string $siteIds               siteIds (optional)
     * @param string $entityRemoteUniqueIds entityRemoteUniqueIds (optional)
     * @param string $entityRemoteUuids     entityRemoteUuids (optional)
     * @param string $entityIds             entityIds (optional)
     * @param string $groupBy               groupBy (optional)
     * @param string $itemsPerPage          itemsPerPage (optional)
     * @param string $page                  page (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList
     */
    public function syndicationControllerList($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $itemsPerPage = null, $page = null)
    {
        list($response) = $this->syndicationControllerListWithHttpInfo($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $itemsPerPage, $page);

        return $response;
    }

    /**
     * Operation syndicationControllerListWithHttpInfo.
     *
     * @param string $statuses              (optional)
     * @param string $migrationId           (optional)
     * @param string $includeUsage          (optional)
     * @param string $sourceSyndicationId   (optional)
     * @param string $flowMachineNames      (optional)
     * @param string $flowIds               (optional)
     * @param string $poolMachineNames      (optional)
     * @param string $poolIds               (optional)
     * @param string $siteUuids             (optional)
     * @param string $siteIds               (optional)
     * @param string $entityRemoteUniqueIds (optional)
     * @param string $entityRemoteUuids     (optional)
     * @param string $entityIds             (optional)
     * @param string $groupBy               (optional)
     * @param string $itemsPerPage          (optional)
     * @param string $page                  (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerListWithHttpInfo($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $itemsPerPage = null, $page = null)
    {
        $request = $this->syndicationControllerListRequest($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $itemsPerPage, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerListAsync.
     *
     * @param string $statuses              (optional)
     * @param string $migrationId           (optional)
     * @param string $includeUsage          (optional)
     * @param string $sourceSyndicationId   (optional)
     * @param string $flowMachineNames      (optional)
     * @param string $flowIds               (optional)
     * @param string $poolMachineNames      (optional)
     * @param string $poolIds               (optional)
     * @param string $siteUuids             (optional)
     * @param string $siteIds               (optional)
     * @param string $entityRemoteUniqueIds (optional)
     * @param string $entityRemoteUuids     (optional)
     * @param string $entityIds             (optional)
     * @param string $groupBy               (optional)
     * @param string $itemsPerPage          (optional)
     * @param string $page                  (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerListAsync($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $itemsPerPage = null, $page = null)
    {
        return $this->syndicationControllerListAsyncWithHttpInfo($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $itemsPerPage, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerListAsyncWithHttpInfo.
     *
     * @param string $statuses              (optional)
     * @param string $migrationId           (optional)
     * @param string $includeUsage          (optional)
     * @param string $sourceSyndicationId   (optional)
     * @param string $flowMachineNames      (optional)
     * @param string $flowIds               (optional)
     * @param string $poolMachineNames      (optional)
     * @param string $poolIds               (optional)
     * @param string $siteUuids             (optional)
     * @param string $siteIds               (optional)
     * @param string $entityRemoteUniqueIds (optional)
     * @param string $entityRemoteUuids     (optional)
     * @param string $entityIds             (optional)
     * @param string $groupBy               (optional)
     * @param string $itemsPerPage          (optional)
     * @param string $page                  (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerListAsyncWithHttpInfo($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $itemsPerPage = null, $page = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\PagedSyndicationList';
        $request = $this->syndicationControllerListRequest($statuses, $migrationId, $includeUsage, $sourceSyndicationId, $flowMachineNames, $flowIds, $poolMachineNames, $poolIds, $siteUuids, $siteIds, $entityRemoteUniqueIds, $entityRemoteUuids, $entityIds, $groupBy, $itemsPerPage, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerList'.
     *
     * @param string $statuses              (optional)
     * @param string $migrationId           (optional)
     * @param string $includeUsage          (optional)
     * @param string $sourceSyndicationId   (optional)
     * @param string $flowMachineNames      (optional)
     * @param string $flowIds               (optional)
     * @param string $poolMachineNames      (optional)
     * @param string $poolIds               (optional)
     * @param string $siteUuids             (optional)
     * @param string $siteIds               (optional)
     * @param string $entityRemoteUniqueIds (optional)
     * @param string $entityRemoteUuids     (optional)
     * @param string $entityIds             (optional)
     * @param string $groupBy               (optional)
     * @param string $itemsPerPage          (optional)
     * @param string $page                  (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerListRequest($statuses = null, $migrationId = null, $includeUsage = null, $sourceSyndicationId = null, $flowMachineNames = null, $flowIds = null, $poolMachineNames = null, $poolIds = null, $siteUuids = null, $siteIds = null, $entityRemoteUniqueIds = null, $entityRemoteUuids = null, $entityIds = null, $groupBy = null, $itemsPerPage = null, $page = null)
    {
        $resourcePath = '/sync-core/syndication';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $statuses) {
            if ('form' === 'form' && is_array($statuses)) {
                foreach ($statuses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['statuses'] = $statuses;
            }
        }
        // query params
        if (null !== $migrationId) {
            if ('form' === 'form' && is_array($migrationId)) {
                foreach ($migrationId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['migrationId'] = $migrationId;
            }
        }
        // query params
        if (null !== $includeUsage) {
            if ('form' === 'form' && is_array($includeUsage)) {
                foreach ($includeUsage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['includeUsage'] = $includeUsage;
            }
        }
        // query params
        if (null !== $sourceSyndicationId) {
            if ('form' === 'form' && is_array($sourceSyndicationId)) {
                foreach ($sourceSyndicationId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['sourceSyndicationId'] = $sourceSyndicationId;
            }
        }
        // query params
        if (null !== $flowMachineNames) {
            if ('form' === 'form' && is_array($flowMachineNames)) {
                foreach ($flowMachineNames as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['flowMachineNames'] = $flowMachineNames;
            }
        }
        // query params
        if (null !== $flowIds) {
            if ('form' === 'form' && is_array($flowIds)) {
                foreach ($flowIds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['flowIds'] = $flowIds;
            }
        }
        // query params
        if (null !== $poolMachineNames) {
            if ('form' === 'form' && is_array($poolMachineNames)) {
                foreach ($poolMachineNames as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['poolMachineNames'] = $poolMachineNames;
            }
        }
        // query params
        if (null !== $poolIds) {
            if ('form' === 'form' && is_array($poolIds)) {
                foreach ($poolIds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['poolIds'] = $poolIds;
            }
        }
        // query params
        if (null !== $siteUuids) {
            if ('form' === 'form' && is_array($siteUuids)) {
                foreach ($siteUuids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['siteUuids'] = $siteUuids;
            }
        }
        // query params
        if (null !== $siteIds) {
            if ('form' === 'form' && is_array($siteIds)) {
                foreach ($siteIds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['siteIds'] = $siteIds;
            }
        }
        // query params
        if (null !== $entityRemoteUniqueIds) {
            if ('form' === 'form' && is_array($entityRemoteUniqueIds)) {
                foreach ($entityRemoteUniqueIds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityRemoteUniqueIds'] = $entityRemoteUniqueIds;
            }
        }
        // query params
        if (null !== $entityRemoteUuids) {
            if ('form' === 'form' && is_array($entityRemoteUuids)) {
                foreach ($entityRemoteUuids as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityRemoteUuids'] = $entityRemoteUuids;
            }
        }
        // query params
        if (null !== $entityIds) {
            if ('form' === 'form' && is_array($entityIds)) {
                foreach ($entityIds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['entityIds'] = $entityIds;
            }
        }
        // query params
        if (null !== $groupBy) {
            if ('form' === 'form' && is_array($groupBy)) {
                foreach ($groupBy as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['groupBy'] = $groupBy;
            }
        }
        // query params
        if (null !== $itemsPerPage) {
            if ('form' === 'form' && is_array($itemsPerPage)) {
                foreach ($itemsPerPage as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['itemsPerPage'] = $itemsPerPage;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerUsageSummary.
     *
     * @param string $id id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary
     */
    public function syndicationControllerUsageSummary($id)
    {
        list($response) = $this->syndicationControllerUsageSummaryWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation syndicationControllerUsageSummaryWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerUsageSummaryWithHttpInfo($id)
    {
        $request = $this->syndicationControllerUsageSummaryRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerUsageSummaryAsync.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryAsync($id)
    {
        return $this->syndicationControllerUsageSummaryAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerUsageSummaryAsyncWithHttpInfo.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryAsyncWithHttpInfo($id)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummary';
        $request = $this->syndicationControllerUsageSummaryRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerUsageSummary'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerUsageSummaryRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (is_array($id) && 0 === count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling syndicationControllerUsageSummary');
        }

        $resourcePath = '/sync-core/syndication/usage-summary/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syndicationControllerUsageSummaryForSite.
     *
     * @param string $siteUuid       siteUuid (required)
     * @param string $remoteUuid     remoteUuid (optional)
     * @param string $remoteUniqueId remoteUniqueId (optional)
     * @param string $page           page (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse
     */
    public function syndicationControllerUsageSummaryForSite($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $page = null)
    {
        list($response) = $this->syndicationControllerUsageSummaryForSiteWithHttpInfo($siteUuid, $remoteUuid, $remoteUniqueId, $page);

        return $response;
    }

    /**
     * Operation syndicationControllerUsageSummaryForSiteWithHttpInfo.
     *
     * @param string $siteUuid       (required)
     * @param string $remoteUuid     (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $page           (optional)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function syndicationControllerUsageSummaryForSiteWithHttpInfo($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $page = null)
    {
        $request = $this->syndicationControllerUsageSummaryForSiteRequest($siteUuid, $remoteUuid, $remoteUniqueId, $page);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation syndicationControllerUsageSummaryForSiteAsync.
     *
     * @param string $siteUuid       (required)
     * @param string $remoteUuid     (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $page           (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryForSiteAsync($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $page = null)
    {
        return $this->syndicationControllerUsageSummaryForSiteAsyncWithHttpInfo($siteUuid, $remoteUuid, $remoteUniqueId, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation syndicationControllerUsageSummaryForSiteAsyncWithHttpInfo.
     *
     * @param string $siteUuid       (required)
     * @param string $remoteUuid     (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $page           (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syndicationControllerUsageSummaryForSiteAsyncWithHttpInfo($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $page = null)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryListResponse';
        $request = $this->syndicationControllerUsageSummaryForSiteRequest($siteUuid, $remoteUuid, $remoteUniqueId, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'syndicationControllerUsageSummaryForSite'.
     *
     * @param string $siteUuid       (required)
     * @param string $remoteUuid     (optional)
     * @param string $remoteUniqueId (optional)
     * @param string $page           (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function syndicationControllerUsageSummaryForSiteRequest($siteUuid, $remoteUuid = null, $remoteUniqueId = null, $page = null)
    {
        // verify the required parameter 'siteUuid' is set
        if (null === $siteUuid || (is_array($siteUuid) && 0 === count($siteUuid))) {
            throw new \InvalidArgumentException('Missing the required parameter $siteUuid when calling syndicationControllerUsageSummaryForSite');
        }

        $resourcePath = '/sync-core/syndication/usage-summary-for-site/{siteUuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (null !== $remoteUuid) {
            if ('form' === 'form' && is_array($remoteUuid)) {
                foreach ($remoteUuid as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['remoteUuid'] = $remoteUuid;
            }
        }
        // query params
        if (null !== $remoteUniqueId) {
            if ('form' === 'form' && is_array($remoteUniqueId)) {
                foreach ($remoteUniqueId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['remoteUniqueId'] = $remoteUniqueId;
            }
        }
        // query params
        if (null !== $page) {
            if ('form' === 'form' && is_array($page)) {
                foreach ($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            } else {
                $queryParams['page'] = $page;
            }
        }

        // path params
        if (null !== $siteUuid) {
            $resourcePath = str_replace(
                '{'.'siteUuid'.'}',
                ObjectSerializer::toPathValue($siteUuid),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usageStatsControllerGetForPeriod.
     *
     * @param string                                        $period period (required)
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type   type (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\UsageStats
     */
    public function usageStatsControllerGetForPeriod($period, $type)
    {
        list($response) = $this->usageStatsControllerGetForPeriodWithHttpInfo($period, $type);

        return $response;
    }

    /**
     * Operation usageStatsControllerGetForPeriodWithHttpInfo.
     *
     * @param string                                        $period (required)
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type   (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\UsageStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageStatsControllerGetForPeriodWithHttpInfo($period, $type)
    {
        $request = $this->usageStatsControllerGetForPeriodRequest($period, $type);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageStats' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usageStatsControllerGetForPeriodAsync.
     *
     * @param string                                        $period (required)
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type   (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForPeriodAsync($period, $type)
    {
        return $this->usageStatsControllerGetForPeriodAsyncWithHttpInfo($period, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation usageStatsControllerGetForPeriodAsyncWithHttpInfo.
     *
     * @param string                                        $period (required)
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type   (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForPeriodAsyncWithHttpInfo($period, $type)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
        $request = $this->usageStatsControllerGetForPeriodRequest($period, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'usageStatsControllerGetForPeriod'.
     *
     * @param string                                        $period (required)
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type   (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usageStatsControllerGetForPeriodRequest($period, $type)
    {
        // verify the required parameter 'period' is set
        if (null === $period || (is_array($period) && 0 === count($period))) {
            throw new \InvalidArgumentException('Missing the required parameter $period when calling usageStatsControllerGetForPeriod');
        }
        // verify the required parameter 'type' is set
        if (null === $type || (is_array($type) && 0 === count($type))) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling usageStatsControllerGetForPeriod');
        }

        $resourcePath = '/sync-core/usage-stats/for-period/{type}/{period}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $period) {
            $resourcePath = str_replace(
                '{'.'period'.'}',
                ObjectSerializer::toPathValue($period),
                $resourcePath
            );
        }
        // path params
        if (null !== $type) {
            $resourcePath = str_replace(
                '{'.'type'.'}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usageStatsControllerGetForType.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type type (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\UsageStats
     */
    public function usageStatsControllerGetForType($type)
    {
        list($response) = $this->usageStatsControllerGetForTypeWithHttpInfo($type);

        return $response;
    }

    /**
     * Operation usageStatsControllerGetForTypeWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type (required)
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\UsageStats, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageStatsControllerGetForTypeWithHttpInfo($type)
    {
        $request = $this->usageStatsControllerGetForTypeRequest($type);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageStats' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usageStatsControllerGetForTypeAsync.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForTypeAsync($type)
    {
        return $this->usageStatsControllerGetForTypeAsyncWithHttpInfo($type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation usageStatsControllerGetForTypeAsyncWithHttpInfo.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerGetForTypeAsyncWithHttpInfo($type)
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageStats';
        $request = $this->usageStatsControllerGetForTypeRequest($type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'usageStatsControllerGetForType'.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\UsageStatsType $type (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usageStatsControllerGetForTypeRequest($type)
    {
        // verify the required parameter 'type' is set
        if (null === $type || (is_array($type) && 0 === count($type))) {
            throw new \InvalidArgumentException('Missing the required parameter $type when calling usageStatsControllerGetForType');
        }

        $resourcePath = '/sync-core/usage-stats/for-period/{type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $type) {
            $resourcePath = str_replace(
                '{'.'type'.'}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usageStatsControllerSummary.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\UsageSummary
     */
    public function usageStatsControllerSummary()
    {
        list($response) = $this->usageStatsControllerSummaryWithHttpInfo();

        return $response;
    }

    /**
     * Operation usageStatsControllerSummaryWithHttpInfo.
     *
     * @throws \EdgeBox\SyncCore\V2\Raw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \EdgeBox\SyncCore\V2\Raw\Model\UsageSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function usageStatsControllerSummaryWithHttpInfo()
    {
        $request = $this->usageStatsControllerSummaryRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation usageStatsControllerSummaryAsync.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerSummaryAsync()
    {
        return $this->usageStatsControllerSummaryAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            )
        ;
    }

    /**
     * Operation usageStatsControllerSummaryAsyncWithHttpInfo.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usageStatsControllerSummaryAsyncWithHttpInfo()
    {
        $returnType = '\EdgeBox\SyncCore\V2\Raw\Model\UsageSummary';
        $request = $this->usageStatsControllerSummaryRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            )
        ;
    }

    /**
     * Create request for operation 'usageStatsControllerSummary'.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usageStatsControllerSummaryRequest()
    {
        $resourcePath = '/sync-core/usage-stats/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (null !== $this->config->getAccessToken()) {
            $headers['Authorization'] = 'Bearer '.$this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
