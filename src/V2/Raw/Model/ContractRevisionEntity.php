<?php
/**
 * ContractRevisionEntity.
 *
 * PHP version 7.2
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Cloud Sync Core.
 *
 * The Sync Core.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EdgeBox\SyncCore\V2\Raw\Model;

use ArrayAccess;
use EdgeBox\SyncCore\V2\Raw\ObjectSerializer;

/**
 * ContractRevisionEntity Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ContractRevisionEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'ContractRevisionEntity';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'hostingType' => '\EdgeBox\SyncCore\V2\Raw\Model\ContractType',
        'product' => '\EdgeBox\SyncCore\V2\Raw\Model\Product',
        'packageType' => '\EdgeBox\SyncCore\V2\Raw\Model\Package',
        'revisionTransition' => '\EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionTransition',
        'maxUpdatesPerMonth' => 'float',
        'startDate' => 'float',
        'endDate' => 'float',
        'customer' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'contract' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'previousContractRevision' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'uuid' => 'string',
        'id' => 'string',
        'createdAt' => 'float',
        'updatedAt' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'hostingType' => null,
        'product' => null,
        'packageType' => null,
        'revisionTransition' => null,
        'maxUpdatesPerMonth' => null,
        'startDate' => null,
        'endDate' => null,
        'customer' => null,
        'contract' => null,
        'previousContractRevision' => null,
        'uuid' => null,
        'id' => null,
        'createdAt' => null,
        'updatedAt' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hostingType' => 'hostingType',
        'product' => 'product',
        'packageType' => 'packageType',
        'revisionTransition' => 'revisionTransition',
        'maxUpdatesPerMonth' => 'maxUpdatesPerMonth',
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'customer' => 'customer',
        'contract' => 'contract',
        'previousContractRevision' => 'previousContractRevision',
        'uuid' => 'uuid',
        'id' => 'id',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'hostingType' => 'setHostingType',
        'product' => 'setProduct',
        'packageType' => 'setPackageType',
        'revisionTransition' => 'setRevisionTransition',
        'maxUpdatesPerMonth' => 'setMaxUpdatesPerMonth',
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'customer' => 'setCustomer',
        'contract' => 'setContract',
        'previousContractRevision' => 'setPreviousContractRevision',
        'uuid' => 'setUuid',
        'id' => 'setId',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'hostingType' => 'getHostingType',
        'product' => 'getProduct',
        'packageType' => 'getPackageType',
        'revisionTransition' => 'getRevisionTransition',
        'maxUpdatesPerMonth' => 'getMaxUpdatesPerMonth',
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'customer' => 'getCustomer',
        'contract' => 'getContract',
        'previousContractRevision' => 'getPreviousContractRevision',
        'uuid' => 'getUuid',
        'id' => 'getId',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hostingType'] = $data['hostingType'] ?? null;
        $this->container['product'] = $data['product'] ?? null;
        $this->container['packageType'] = $data['packageType'] ?? null;
        $this->container['revisionTransition'] = $data['revisionTransition'] ?? null;
        $this->container['maxUpdatesPerMonth'] = $data['maxUpdatesPerMonth'] ?? null;
        $this->container['startDate'] = $data['startDate'] ?? null;
        $this->container['endDate'] = $data['endDate'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['contract'] = $data['contract'] ?? null;
        $this->container['previousContractRevision'] = $data['previousContractRevision'] ?? null;
        $this->container['uuid'] = $data['uuid'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['hostingType']) {
            $invalidProperties[] = "'hostingType' can't be null";
        }
        if (null === $this->container['product']) {
            $invalidProperties[] = "'product' can't be null";
        }
        if (null === $this->container['packageType']) {
            $invalidProperties[] = "'packageType' can't be null";
        }
        if (null === $this->container['revisionTransition']) {
            $invalidProperties[] = "'revisionTransition' can't be null";
        }
        if (null === $this->container['startDate']) {
            $invalidProperties[] = "'startDate' can't be null";
        }
        if (null === $this->container['endDate']) {
            $invalidProperties[] = "'endDate' can't be null";
        }
        if (null === $this->container['customer']) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if (null === $this->container['contract']) {
            $invalidProperties[] = "'contract' can't be null";
        }
        if (null === $this->container['uuid']) {
            $invalidProperties[] = "'uuid' can't be null";
        }
        if (null === $this->container['id']) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (null === $this->container['createdAt']) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if (null === $this->container['updatedAt']) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets hostingType.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractType
     */
    public function getHostingType()
    {
        return $this->container['hostingType'];
    }

    /**
     * Sets hostingType.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\ContractType $hostingType hostingType
     *
     * @return self
     */
    public function setHostingType($hostingType)
    {
        $this->container['hostingType'] = $hostingType;

        return $this;
    }

    /**
     * Gets product.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\Product
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\Product $product product
     *
     * @return self
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets packageType.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\Package
     */
    public function getPackageType()
    {
        return $this->container['packageType'];
    }

    /**
     * Sets packageType.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\Package $packageType packageType
     *
     * @return self
     */
    public function setPackageType($packageType)
    {
        $this->container['packageType'] = $packageType;

        return $this;
    }

    /**
     * Gets revisionTransition.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionTransition
     */
    public function getRevisionTransition()
    {
        return $this->container['revisionTransition'];
    }

    /**
     * Sets revisionTransition.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\ContractRevisionTransition $revisionTransition revisionTransition
     *
     * @return self
     */
    public function setRevisionTransition($revisionTransition)
    {
        $this->container['revisionTransition'] = $revisionTransition;

        return $this;
    }

    /**
     * Gets maxUpdatesPerMonth.
     *
     * @return null|float
     */
    public function getMaxUpdatesPerMonth()
    {
        return $this->container['maxUpdatesPerMonth'];
    }

    /**
     * Sets maxUpdatesPerMonth.
     *
     * @param null|float $maxUpdatesPerMonth maxUpdatesPerMonth
     *
     * @return self
     */
    public function setMaxUpdatesPerMonth($maxUpdatesPerMonth)
    {
        $this->container['maxUpdatesPerMonth'] = $maxUpdatesPerMonth;

        return $this;
    }

    /**
     * Gets startDate.
     *
     * @return float
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate.
     *
     * @param float $startDate startDate
     *
     * @return self
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate.
     *
     * @return float
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate.
     *
     * @param float $endDate endDate
     *
     * @return self
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets customer.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets contract.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $contract contract
     *
     * @return self
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }

    /**
     * Gets previousContractRevision.
     *
     * @return null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getPreviousContractRevision()
    {
        return $this->container['previousContractRevision'];
    }

    /**
     * Sets previousContractRevision.
     *
     * @param null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $previousContractRevision previousContractRevision
     *
     * @return self
     */
    public function setPreviousContractRevision($previousContractRevision)
    {
        $this->container['previousContractRevision'] = $previousContractRevision;

        return $this;
    }

    /**
     * Gets uuid.
     *
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid.
     *
     * @param string $uuid uuid
     *
     * @return self
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdAt.
     *
     * @return float
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt.
     *
     * @param float $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt.
     *
     * @return float
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt.
     *
     * @param float $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
