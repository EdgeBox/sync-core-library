<?php
/**
 * SyndicationUsageSummary.
 *
 * PHP version 7.2
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Cloud Sync Core.
 *
 * The Sync Core.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EdgeBox\SyncCore\V2\Raw\Model;

use ArrayAccess;
use EdgeBox\SyncCore\V2\Raw\ObjectSerializer;

/**
 * SyndicationUsageSummary Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SyndicationUsageSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'SyndicationUsageSummary';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'startedAt' => 'float',
        'finishedAt' => 'float',
        'thisSite' => '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage',
        'sourceSite' => '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage',
        'targetSite' => '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage',
        'targetSummary' => '\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryStatusGroup[]',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'startedAt' => null,
        'finishedAt' => null,
        'thisSite' => null,
        'sourceSite' => null,
        'targetSite' => null,
        'targetSummary' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'startedAt' => 'startedAt',
        'finishedAt' => 'finishedAt',
        'thisSite' => 'thisSite',
        'sourceSite' => 'sourceSite',
        'targetSite' => 'targetSite',
        'targetSummary' => 'targetSummary',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'startedAt' => 'setStartedAt',
        'finishedAt' => 'setFinishedAt',
        'thisSite' => 'setThisSite',
        'sourceSite' => 'setSourceSite',
        'targetSite' => 'setTargetSite',
        'targetSummary' => 'setTargetSummary',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'startedAt' => 'getStartedAt',
        'finishedAt' => 'getFinishedAt',
        'thisSite' => 'getThisSite',
        'sourceSite' => 'getSourceSite',
        'targetSite' => 'getTargetSite',
        'targetSummary' => 'getTargetSummary',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['startedAt'] = $data['startedAt'] ?? null;
        $this->container['finishedAt'] = $data['finishedAt'] ?? null;
        $this->container['thisSite'] = $data['thisSite'] ?? null;
        $this->container['sourceSite'] = $data['sourceSite'] ?? null;
        $this->container['targetSite'] = $data['targetSite'] ?? null;
        $this->container['targetSummary'] = $data['targetSummary'] ?? null;
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['startedAt']) {
            $invalidProperties[] = "'startedAt' can't be null";
        }
        if (null === $this->container['thisSite']) {
            $invalidProperties[] = "'thisSite' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets startedAt.
     *
     * @return float
     */
    public function getStartedAt()
    {
        return $this->container['startedAt'];
    }

    /**
     * Sets startedAt.
     *
     * @param float $startedAt startedAt
     *
     * @return self
     */
    public function setStartedAt($startedAt)
    {
        $this->container['startedAt'] = $startedAt;

        return $this;
    }

    /**
     * Gets finishedAt.
     *
     * @return null|float
     */
    public function getFinishedAt()
    {
        return $this->container['finishedAt'];
    }

    /**
     * Sets finishedAt.
     *
     * @param null|float $finishedAt finishedAt
     *
     * @return self
     */
    public function setFinishedAt($finishedAt)
    {
        $this->container['finishedAt'] = $finishedAt;

        return $this;
    }

    /**
     * Gets thisSite.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage
     */
    public function getThisSite()
    {
        return $this->container['thisSite'];
    }

    /**
     * Sets thisSite.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage $thisSite thisSite
     *
     * @return self
     */
    public function setThisSite($thisSite)
    {
        $this->container['thisSite'] = $thisSite;

        return $this;
    }

    /**
     * Gets sourceSite.
     *
     * @return null|\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage
     */
    public function getSourceSite()
    {
        return $this->container['sourceSite'];
    }

    /**
     * Sets sourceSite.
     *
     * @param null|\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage $sourceSite sourceSite
     *
     * @return self
     */
    public function setSourceSite($sourceSite)
    {
        $this->container['sourceSite'] = $sourceSite;

        return $this;
    }

    /**
     * Gets targetSite.
     *
     * @return null|\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage
     */
    public function getTargetSite()
    {
        return $this->container['targetSite'];
    }

    /**
     * Sets targetSite.
     *
     * @param null|\EdgeBox\SyncCore\V2\Raw\Model\SyndicationEntityWithUsage $targetSite targetSite
     *
     * @return self
     */
    public function setTargetSite($targetSite)
    {
        $this->container['targetSite'] = $targetSite;

        return $this;
    }

    /**
     * Gets targetSummary.
     *
     * @return null|\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryStatusGroup[]
     */
    public function getTargetSummary()
    {
        return $this->container['targetSummary'];
    }

    /**
     * Sets targetSummary.
     *
     * @param null|\EdgeBox\SyncCore\V2\Raw\Model\SyndicationUsageSummaryStatusGroup[] $targetSummary targetSummary
     *
     * @return self
     */
    public function setTargetSummary($targetSummary)
    {
        $this->container['targetSummary'] = $targetSummary;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
