<?php
/**
 * FileEntity.
 *
 * PHP version 7.2
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */

/**
 * Cloud Sync Core.
 *
 * The Sync Core.
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace EdgeBox\SyncCore\V2\Raw\Model;

use ArrayAccess;
use EdgeBox\SyncCore\V2\Raw\ObjectSerializer;

/**
 * FileEntity Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FileEntity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'FileEntity';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'type' => '\EdgeBox\SyncCore\V2\Raw\Model\FileType',
        'fileName' => 'string',
        'remoteFilePath' => 'string',
        'remoteDownloadUrl' => 'string',
        'hash' => 'string',
        'uploadUrl' => 'string',
        'downloadUrl' => 'string',
        'mimeType' => 'string',
        'fileSize' => 'float',
        'maxFileSize' => 'float',
        'status' => '\EdgeBox\SyncCore\V2\Raw\Model\FileStatus',
        'customer' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'site' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'project' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'entity' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'flow' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'syndication' => '\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference',
        'id' => 'string',
        'createdAt' => 'float',
        'updatedAt' => 'float',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'type' => null,
        'fileName' => null,
        'remoteFilePath' => null,
        'remoteDownloadUrl' => null,
        'hash' => null,
        'uploadUrl' => null,
        'downloadUrl' => null,
        'mimeType' => null,
        'fileSize' => null,
        'maxFileSize' => null,
        'status' => null,
        'customer' => null,
        'site' => null,
        'project' => null,
        'entity' => null,
        'flow' => null,
        'syndication' => null,
        'id' => null,
        'createdAt' => null,
        'updatedAt' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'fileName' => 'fileName',
        'remoteFilePath' => 'remoteFilePath',
        'remoteDownloadUrl' => 'remoteDownloadUrl',
        'hash' => 'hash',
        'uploadUrl' => 'uploadUrl',
        'downloadUrl' => 'downloadUrl',
        'mimeType' => 'mimeType',
        'fileSize' => 'fileSize',
        'maxFileSize' => 'maxFileSize',
        'status' => 'status',
        'customer' => 'customer',
        'site' => 'site',
        'project' => 'project',
        'entity' => 'entity',
        'flow' => 'flow',
        'syndication' => 'syndication',
        'id' => 'id',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'fileName' => 'setFileName',
        'remoteFilePath' => 'setRemoteFilePath',
        'remoteDownloadUrl' => 'setRemoteDownloadUrl',
        'hash' => 'setHash',
        'uploadUrl' => 'setUploadUrl',
        'downloadUrl' => 'setDownloadUrl',
        'mimeType' => 'setMimeType',
        'fileSize' => 'setFileSize',
        'maxFileSize' => 'setMaxFileSize',
        'status' => 'setStatus',
        'customer' => 'setCustomer',
        'site' => 'setSite',
        'project' => 'setProject',
        'entity' => 'setEntity',
        'flow' => 'setFlow',
        'syndication' => 'setSyndication',
        'id' => 'setId',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'fileName' => 'getFileName',
        'remoteFilePath' => 'getRemoteFilePath',
        'remoteDownloadUrl' => 'getRemoteDownloadUrl',
        'hash' => 'getHash',
        'uploadUrl' => 'getUploadUrl',
        'downloadUrl' => 'getDownloadUrl',
        'mimeType' => 'getMimeType',
        'fileSize' => 'getFileSize',
        'maxFileSize' => 'getMaxFileSize',
        'status' => 'getStatus',
        'customer' => 'getCustomer',
        'site' => 'getSite',
        'project' => 'getProject',
        'entity' => 'getEntity',
        'flow' => 'getFlow',
        'syndication' => 'getSyndication',
        'id' => 'getId',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['fileName'] = $data['fileName'] ?? null;
        $this->container['remoteFilePath'] = $data['remoteFilePath'] ?? null;
        $this->container['remoteDownloadUrl'] = $data['remoteDownloadUrl'] ?? null;
        $this->container['hash'] = $data['hash'] ?? null;
        $this->container['uploadUrl'] = $data['uploadUrl'] ?? null;
        $this->container['downloadUrl'] = $data['downloadUrl'] ?? null;
        $this->container['mimeType'] = $data['mimeType'] ?? null;
        $this->container['fileSize'] = $data['fileSize'] ?? null;
        $this->container['maxFileSize'] = $data['maxFileSize'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['site'] = $data['site'] ?? null;
        $this->container['project'] = $data['project'] ?? null;
        $this->container['entity'] = $data['entity'] ?? null;
        $this->container['flow'] = $data['flow'] ?? null;
        $this->container['syndication'] = $data['syndication'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
    }

    /**
     * Gets the string presentation of the object.
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (null === $this->container['type']) {
            $invalidProperties[] = "'type' can't be null";
        }
        if (null === $this->container['fileName']) {
            $invalidProperties[] = "'fileName' can't be null";
        }
        if (null === $this->container['mimeType']) {
            $invalidProperties[] = "'mimeType' can't be null";
        }
        if (null === $this->container['fileSize']) {
            $invalidProperties[] = "'fileSize' can't be null";
        }
        if (null === $this->container['status']) {
            $invalidProperties[] = "'status' can't be null";
        }
        if (null === $this->container['customer']) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if (null === $this->container['site']) {
            $invalidProperties[] = "'site' can't be null";
        }
        if (null === $this->container['project']) {
            $invalidProperties[] = "'project' can't be null";
        }
        if (null === $this->container['id']) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (null === $this->container['createdAt']) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if (null === $this->container['updatedAt']) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return 0 === count($this->listInvalidProperties());
    }

    /**
     * Gets type.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\FileType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets fileName.
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['fileName'];
    }

    /**
     * Sets fileName.
     *
     * @param string $fileName fileName
     *
     * @return self
     */
    public function setFileName($fileName)
    {
        $this->container['fileName'] = $fileName;

        return $this;
    }

    /**
     * Gets remoteFilePath.
     *
     * @return null|string
     */
    public function getRemoteFilePath()
    {
        return $this->container['remoteFilePath'];
    }

    /**
     * Sets remoteFilePath.
     *
     * @param null|string $remoteFilePath remoteFilePath
     *
     * @return self
     */
    public function setRemoteFilePath($remoteFilePath)
    {
        $this->container['remoteFilePath'] = $remoteFilePath;

        return $this;
    }

    /**
     * Gets remoteDownloadUrl.
     *
     * @return null|string
     */
    public function getRemoteDownloadUrl()
    {
        return $this->container['remoteDownloadUrl'];
    }

    /**
     * Sets remoteDownloadUrl.
     *
     * @param null|string $remoteDownloadUrl remoteDownloadUrl
     *
     * @return self
     */
    public function setRemoteDownloadUrl($remoteDownloadUrl)
    {
        $this->container['remoteDownloadUrl'] = $remoteDownloadUrl;

        return $this;
    }

    /**
     * Gets hash.
     *
     * @return null|string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash.
     *
     * @param null|string $hash hash
     *
     * @return self
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets uploadUrl.
     *
     * @return null|string
     */
    public function getUploadUrl()
    {
        return $this->container['uploadUrl'];
    }

    /**
     * Sets uploadUrl.
     *
     * @param null|string $uploadUrl uploadUrl
     *
     * @return self
     */
    public function setUploadUrl($uploadUrl)
    {
        $this->container['uploadUrl'] = $uploadUrl;

        return $this;
    }

    /**
     * Gets downloadUrl.
     *
     * @return null|string
     */
    public function getDownloadUrl()
    {
        return $this->container['downloadUrl'];
    }

    /**
     * Sets downloadUrl.
     *
     * @param null|string $downloadUrl downloadUrl
     *
     * @return self
     */
    public function setDownloadUrl($downloadUrl)
    {
        $this->container['downloadUrl'] = $downloadUrl;

        return $this;
    }

    /**
     * Gets mimeType.
     *
     * @return string
     */
    public function getMimeType()
    {
        return $this->container['mimeType'];
    }

    /**
     * Sets mimeType.
     *
     * @param string $mimeType mimeType
     *
     * @return self
     */
    public function setMimeType($mimeType)
    {
        $this->container['mimeType'] = $mimeType;

        return $this;
    }

    /**
     * Gets fileSize.
     *
     * @return float
     */
    public function getFileSize()
    {
        return $this->container['fileSize'];
    }

    /**
     * Sets fileSize.
     *
     * @param float $fileSize fileSize
     *
     * @return self
     */
    public function setFileSize($fileSize)
    {
        $this->container['fileSize'] = $fileSize;

        return $this;
    }

    /**
     * Gets maxFileSize.
     *
     * @return null|float
     */
    public function getMaxFileSize()
    {
        return $this->container['maxFileSize'];
    }

    /**
     * Sets maxFileSize.
     *
     * @param null|float $maxFileSize maxFileSize
     *
     * @return self
     */
    public function setMaxFileSize($maxFileSize)
    {
        $this->container['maxFileSize'] = $maxFileSize;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\FileStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\FileStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customer.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets site.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $site site
     *
     * @return self
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets project.
     *
     * @return \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project.
     *
     * @param \EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets entity.
     *
     * @return null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity.
     *
     * @param null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $entity entity
     *
     * @return self
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets flow.
     *
     * @return null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow.
     *
     * @param null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $flow flow
     *
     * @return self
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets syndication.
     *
     * @return null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference
     */
    public function getSyndication()
    {
        return $this->container['syndication'];
    }

    /**
     * Sets syndication.
     *
     * @param null|\EdgeBox\SyncCore\V2\Raw\Model\DynamicReference $syndication syndication
     *
     * @return self
     */
    public function setSyndication($syndication)
    {
        $this->container['syndication'] = $syndication;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id.
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets createdAt.
     *
     * @return float
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt.
     *
     * @param float $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt.
     *
     * @return float
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt.
     *
     * @param float $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     *
     * @return bool
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed    $value  Value to be set
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @see https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets a header-safe presentation of the object.
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
